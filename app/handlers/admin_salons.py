from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func, update
from loguru import logger

from app.keyboards.admin_kb import *
from app.states.admin_states import AdminStates
from app.database.models import Salon, Master, Analysis
from app.utils.helpers import format_datetime

salon_router = Router()


# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ê–õ–û–ù–ê–ú–ò ===
@salon_router.message(F.text == "üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∞–ª–æ–Ω–∞–º–∏")
async def salons_menu(message: Message):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∞–ª–æ–Ω–∞–º–∏"""
    await message.answer(
        "üè¢ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∞–ª–æ–Ω–∞–º–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_salons_menu(),
        parse_mode="Markdown"
    )


@salon_router.callback_query(F.data == "back_to_salons")
async def back_to_salons_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é —Å–∞–ª–æ–Ω–æ–≤"""
    await callback.message.edit_text(
        "üè¢ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∞–ª–æ–Ω–∞–º–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_salons_menu(),
        parse_mode="Markdown"
    )
    await callback.answer()


# === –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–ê–õ–û–ù–ê ===
@salon_router.callback_query(F.data == "add_salon")
async def add_salon_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∞–ª–æ–Ω–∞"""
    await callback.message.edit_text(
        "‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∞–ª–æ–Ω–∞*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–ª–æ–Ω–∞:",
        reply_markup=get_back_button("back_to_salons"),
        parse_mode="Markdown"
    )
    await state.set_state(AdminStates.waiting_for_salon_name)
    await callback.answer()


@salon_router.message(AdminStates.waiting_for_salon_name)
async def process_salon_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–∞–ª–æ–Ω–∞"""
    salon_name = message.text.strip()

    if len(salon_name) < 2:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞–ª–æ–Ω–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_keyboard()
        )
        return

    if len(salon_name) > 100:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞–ª–æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_keyboard()
        )
        return

    await state.update_data(salon_name=salon_name)
    await message.answer(
        f"üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {salon_name}\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_salon_city)


@salon_router.message(AdminStates.waiting_for_salon_city)
async def process_salon_city(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞ —Å–∞–ª–æ–Ω–∞"""
    city = message.text.strip()

    if len(city) < 2:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_keyboard()
        )
        return

    if len(city) > 50:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_keyboard()
        )
        return

    await state.update_data(city=city)
    data = await state.get_data()

    await message.answer(
        f"üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {data['salon_name']}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {city}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–æ–≤ (–∫–≤–æ—Ç—É):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_salon_quota)


@salon_router.message(AdminStates.waiting_for_salon_quota)
async def process_salon_quota(message: Message, state: FSMContext, db_session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–≤–æ—Ç—ã —Å–∞–ª–æ–Ω–∞"""
    try:
        quota = int(message.text.strip())
        if quota < 0:
            raise ValueError("Negative quota")
        if quota > 999999:
            raise ValueError("Too large quota")
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 999999:",
            reply_markup=get_cancel_keyboard()
        )
        return

    data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Å–∞–ª–æ–Ω
    existing_salon = await db_session.scalar(
        select(Salon).where(
            Salon.name == data['salon_name'],
            Salon.city == data['city'],
            Salon.is_active == True
        )
    )

    if existing_salon:
        await message.answer(
            f"‚ùå –°–∞–ª–æ–Ω —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≥–æ—Ä–æ–¥–µ {data['city']}.\n"
            f"–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_cancel_keyboard()
        )
        await state.set_state(AdminStates.waiting_for_salon_name)
        return

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–∞–ª–æ–Ω
    new_salon = Salon(
        name=data['salon_name'],
        city=data['city'],
        quota_limit=quota
    )

    db_session.add(new_salon)
    await db_session.commit()
    await db_session.refresh(new_salon)

    await state.clear()
    await message.answer(
        f"‚úÖ –°–∞–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        f"üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {new_salon.name}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {new_salon.city}\n"
        f"üí∞ –ö–≤–æ—Ç–∞: {new_salon.quota_limit}\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω: {format_datetime(new_salon.created_at)}",
        reply_markup=get_admin_main_menu()
    )

    logger.info(f"New salon created: {new_salon.name} in {new_salon.city} with quota {new_salon.quota_limit}")


# === –°–ü–ò–°–û–ö –°–ê–õ–û–ù–û–í ===
@salon_router.callback_query(F.data == "list_salons")
async def list_salons(callback: CallbackQuery, db_session: AsyncSession):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–∞–ª–æ–Ω–æ–≤"""
    query = select(Salon).where(Salon.is_active == True).order_by(Salon.name)
    result = await db_session.execute(query)
    salons = result.scalars().all()

    if not salons:
        await callback.message.edit_text(
            "üìã *–°–ø–∏—Å–æ–∫ —Å–∞–ª–æ–Ω–æ–≤*\n\n"
            "–°–∞–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Å–∞–ª–æ–Ω, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.",
            reply_markup=get_back_button("back_to_salons"),
            parse_mode="Markdown"
        )
        await callback.answer()
        return

    salons_data = [
        {
            'id': salon.id,
            'name': salon.name,
            'city': salon.city
        }
        for salon in salons
    ]

    await callback.message.edit_text(
        f"üìã *–°–ø–∏—Å–æ–∫ —Å–∞–ª–æ–Ω–æ–≤* ({len(salons)})\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–ª–æ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=get_salon_list_keyboard(salons_data),
        parse_mode="Markdown"
    )
    await callback.answer()


# === –î–ï–¢–ê–õ–ò –°–ê–õ–û–ù–ê ===
@salon_router.callback_query(F.data.startswith("salon_"))
async def show_salon_details(callback: CallbackQuery, db_session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–∞–ª–æ–Ω–∞"""
    salon_id = int(callback.data.split("_")[1])

    query = select(Salon).where(Salon.id == salon_id, Salon.is_active == True)
    result = await db_session.execute(query)
    salon = result.scalar_one_or_none()

    if not salon:
        await callback.answer("‚ùå –°–∞–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Å—Ç–µ—Ä–æ–≤
    masters_count = await db_session.scalar(
        select(func.count(Master.id)).where(
            Master.salon_id == salon_id,
            Master.is_active == True
        )
    )

    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–æ–≤
    analyses_count = await db_session.scalar(
        select(func.count(Analysis.id)).where(Analysis.salon_id == salon_id)
    )

    quota_percentage = (salon.quota_used / salon.quota_limit * 100) if salon.quota_limit > 0 else 0
    status_icon = "üü¢" if quota_percentage < 80 else "üü°" if quota_percentage < 95 else "üî¥"

    await callback.message.edit_text(
        f"{status_icon} *{salon.name}*\n\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {salon.city}\n"
        f"üë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤: {masters_count}\n"
        f"üì∏ –í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤: {analyses_count}\n\n"
        f"üí∞ *–ö–≤–æ—Ç—ã:*\n"
        f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {salon.quota_used}/{salon.quota_limit}\n"
        f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {salon.quota_remaining}\n"
        f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {quota_percentage:.1f}%\n\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω: {format_datetime(salon.created_at)}\n"
        f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: {format_datetime(salon.updated_at)}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_salon_actions_keyboard(salon_id),
        parse_mode="Markdown"
    )
    await callback.answer()


# === –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –°–ê–õ–û–ù–ê ===
@salon_router.callback_query(F.data.startswith("edit_salon_"))
async def edit_salon_menu(callback: CallbackQuery, db_session: AsyncSession):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∞–ª–æ–Ω–∞"""
    salon_id = int(callback.data.split("_")[2])

    query = select(Salon).where(Salon.id == salon_id, Salon.is_active == True)
    result = await db_session.execute(query)
    salon = result.scalar_one_or_none()

    if not salon:
        await callback.answer("‚ùå –°–∞–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await callback.message.edit_text(
        f"‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∞–ª–æ–Ω–∞*\n\n"
        f"üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {salon.name}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {salon.city}\n"
        f"üí∞ –ö–≤–æ—Ç–∞: {salon.quota_limit}\n\n"
        f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=get_salon_edit_keyboard(salon_id),
        parse_mode="Markdown"
    )
    await callback.answer()


@salon_router.callback_query(F.data.startswith("edit_salon_name_"))
async def edit_salon_name(callback: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–∞–ª–æ–Ω–∞"""
    salon_id = int(callback.data.split("_")[3])

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–∞–ª–æ–Ω–∞
    query = select(Salon).where(Salon.id == salon_id, Salon.is_active == True)
    result = await db_session.execute(query)
    salon = result.scalar_one_or_none()

    if not salon:
        await callback.answer("‚ùå –°–∞–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await state.update_data(salon_id=salon_id, current_name=salon.name)

    await callback.message.edit_text(
        f"‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–∞–ª–æ–Ω–∞*\n\n"
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {salon.name}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
        reply_markup=get_back_button(f"edit_salon_{salon_id}"),
        parse_mode="Markdown"
    )
    await state.set_state(AdminStates.waiting_for_salon_new_name)
    await callback.answer()


@salon_router.message(AdminStates.waiting_for_salon_new_name)
async def process_salon_new_name(message: Message, state: FSMContext, db_session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–∞–ª–æ–Ω–∞"""
    new_name = message.text.strip()

    if len(new_name) < 2:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞:",
            reply_markup=get_cancel_keyboard()
        )
        return

    if len(new_name) > 100:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=get_cancel_keyboard()
        )
        return

    data = await state.get_data()
    salon_id = data['salon_id']
    current_name = data['current_name']

    # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    if new_name == current_name:
        await message.answer(
            "‚ÑπÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.",
            reply_markup=get_admin_main_menu()
        )
        await state.clear()
        return

    query = select(Salon).where(Salon.id == salon_id)
    result = await db_session.execute(query)
    salon = result.scalar_one_or_none()

    if not salon:
        await message.answer("‚ùå –°–∞–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤ —Ç–æ–º –∂–µ –≥–æ—Ä–æ–¥–µ
    existing_salon = await db_session.scalar(
        select(Salon).where(
            Salon.name == new_name,
            Salon.city == salon.city,
            Salon.id != salon_id,
            Salon.is_active == True
        )
    )

    if existing_salon:
        await message.answer(
            f"‚ùå –°–∞–ª–æ–Ω —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{new_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≥–æ—Ä–æ–¥–µ {salon.city}:",
            reply_markup=get_cancel_keyboard()
        )
        return

    old_name = salon.name
    salon.name = new_name

    await db_session.commit()
    await state.clear()

    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞–ª–æ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–æ!\n\n"
        f"–ë—ã–ª–æ: {old_name}\n"
        f"–°—Ç–∞–ª–æ: {new_name}",
        reply_markup=get_admin_main_menu()
    )

    logger.info(f"Salon name changed from '{old_name}' to '{new_name}' (ID: {salon_id})")


@salon_router.callback_query(F.data.startswith("edit_salon_city_"))
async def edit_salon_city(callback: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–∞–ª–æ–Ω–∞"""
    salon_id = int(callback.data.split("_")[3])

    query = select(Salon).where(Salon.id == salon_id)
    result = await db_session.execute(query)
    salon = result.scalar_one_or_none()

    if not salon:
        await callback.answer("‚ùå –°–∞–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await state.update_data(salon_id=salon_id, current_city=salon.city)

    await callback.message.edit_text(
        f"‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–∞–ª–æ–Ω–∞*\n\n"
        f"–¢–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥: {salon.city}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:",
        reply_markup=get_back_button(f"edit_salon_{salon_id}"),
        parse_mode="Markdown"
    )
    await state.set_state(AdminStates.waiting_for_salon_new_city)
    await callback.answer()


@salon_router.message(AdminStates.waiting_for_salon_new_city)
async def process_salon_new_city(message: Message, state: FSMContext, db_session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞ —Å–∞–ª–æ–Ω–∞"""
    new_city = message.text.strip()

    if len(new_city) < 2:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞:",
            reply_markup=get_cancel_keyboard()
        )
        return

    if len(new_city) > 50:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=get_cancel_keyboard()
        )
        return

    data = await state.get_data()
    salon_id = data['salon_id']
    current_city = data['current_city']

    if new_city == current_city:
        await message.answer(
            "‚ÑπÔ∏è –ì–æ—Ä–æ–¥ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è.",
            reply_markup=get_admin_main_menu()
        )
        await state.clear()
        return

    query = select(Salon).where(Salon.id == salon_id)
    result = await db_session.execute(query)
    salon = result.scalar_one_or_none()

    if not salon:
        await message.answer("‚ùå –°–∞–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Å –Ω–æ–≤—ã–º –≥–æ—Ä–æ–¥–æ–º
    existing_salon = await db_session.scalar(
        select(Salon).where(
            Salon.name == salon.name,
            Salon.city == new_city,
            Salon.id != salon_id,
            Salon.is_active == True
        )
    )

    if existing_salon:
        await message.answer(
            f"‚ùå –°–∞–ª–æ–Ω —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{salon.name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≥–æ—Ä–æ–¥–µ {new_city}:",
            reply_markup=get_cancel_keyboard()
        )
        return

    old_city = salon.city
    salon.city = new_city

    await db_session.commit()
    await state.clear()

    await message.answer(
        f"‚úÖ –ì–æ—Ä–æ–¥ —Å–∞–ª–æ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω!\n\n"
        f"–ë—ã–ª–æ: {old_city}\n"
        f"–°—Ç–∞–ª–æ: {new_city}",
        reply_markup=get_admin_main_menu()
    )

    logger.info(f"Salon city changed from '{old_city}' to '{new_city}' (ID: {salon_id})")


@salon_router.callback_query(F.data.startswith("edit_salon_quota_"))
async def edit_salon_quota(callback: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–≤–æ—Ç—ã —Å–∞–ª–æ–Ω–∞"""
    salon_id = int(callback.data.split("_")[3])

    query = select(Salon).where(Salon.id == salon_id)
    result = await db_session.execute(query)
    salon = result.scalar_one_or_none()

    if not salon:
        await callback.answer("‚ùå –°–∞–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await state.update_data(salon_id=salon_id)

    await callback.message.edit_text(
        f"‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–≤–æ—Ç —Å–∞–ª–æ–Ω–∞*\n\n"
        f"üè¢ –°–∞–ª–æ–Ω: {salon.name}\n"
        f"üìä –¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: {salon.quota_limit}\n"
        f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {salon.quota_used}\n"
        f"‚è≥ –î–æ—Å—Ç—É–ø–Ω–æ: {salon.quota_remaining}\n\n"
        f"‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–∞ –Ω–∏–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–≤–æ—Ç –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –∞–Ω–∞–ª–∏–∑–æ–≤.\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç –∫–≤–æ—Ç:",
        reply_markup=get_back_button(f"edit_salon_{salon_id}"),
        parse_mode="Markdown"
    )
    await state.set_state(AdminStates.waiting_for_salon_new_quota)
    await callback.answer()


@salon_router.message(AdminStates.waiting_for_salon_new_quota)
async def process_salon_new_quota(message: Message, state: FSMContext, db_session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –∫–≤–æ—Ç—ã —Å–∞–ª–æ–Ω–∞"""
    try:
        new_quota = int(message.text.strip())
        if new_quota < 0:
            raise ValueError("Negative quota")
        if new_quota > 999999:
            raise ValueError("Too large quota")
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 999999:",
            reply_markup=get_cancel_keyboard()
        )
        return

    data = await state.get_data()
    salon_id = data['salon_id']

    query = select(Salon).where(Salon.id == salon_id)
    result = await db_session.execute(query)
    salon = result.scalar_one_or_none()

    if not salon:
        await message.answer("‚ùå –°–∞–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    old_quota = salon.quota_limit

    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç –º–µ–Ω—å—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–≤–æ—Ç
    if new_quota < salon.quota_used:
        warning_text = (
            f"‚ö†Ô∏è *–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!*\n\n"
            f"–ù–æ–≤—ã–π –ª–∏–º–∏—Ç ({new_quota}) –º–µ–Ω—å—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–≤–æ—Ç ({salon.quota_used}).\n"
            f"–≠—Ç–æ –∑–∞–±–ª–æ–∫–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ —ç—Ç–æ–º —Å–∞–ª–æ–Ω–µ.\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
        )
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –Ω–æ –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º

    salon.quota_limit = new_quota

    await db_session.commit()
    await state.clear()

    status_icon = "üü¢" if salon.quota_remaining > 0 else "üî¥"

    await message.answer(
        f"‚úÖ –ö–≤–æ—Ç–∞ —Å–∞–ª–æ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!\n\n"
        f"üè¢ –°–∞–ª–æ–Ω: {salon.name}\n"
        f"üìä –ë—ã–ª–æ: {old_quota}\n"
        f"üìà –°—Ç–∞–ª–æ: {new_quota}\n"
        f"{status_icon} –î–æ—Å—Ç—É–ø–Ω–æ: {salon.quota_remaining}",
        reply_markup=get_admin_main_menu()
    )

    logger.info(f"Salon quota changed from {old_quota} to {new_quota} (ID: {salon_id})")


# === –ü–û–ü–û–õ–ù–ï–ù–ò–ï –ö–í–û–¢ ===
@salon_router.message(F.text == "üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–≤–æ—Ç—ã")
async def quota_refill_menu(message: Message, db_session: AsyncSession):
    """–ú–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–≤–æ—Ç"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∞–ª–æ–Ω–æ–≤
    query = select(Salon).where(Salon.is_active == True).order_by(Salon.name)
    result = await db_session.execute(query)
    salons = result.scalars().all()

    if not salons:
        await message.answer(
            "‚ùå –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∞–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å–∞–ª–æ–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã.",
            reply_markup=get_admin_main_menu()
        )
        return

    salons_data = [
        {
            'id': salon.id,
            'name': salon.name,
            'city': salon.city
        }
        for salon in salons
    ]

    await message.answer(
        "üí∞ *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–≤–æ—Ç*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–ª–æ–Ω –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–≤–æ—Ç:",
        reply_markup=get_salon_selection_keyboard(salons_data, "quota_salon"),
        parse_mode="Markdown"
    )


@salon_router.callback_query(F.data.startswith("quota_salon_"))
async def select_salon_for_quota(callback: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    """–í—ã–±–æ—Ä —Å–∞–ª–æ–Ω–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–≤–æ—Ç"""
    salon_id = int(callback.data.split("_")[-1])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–ª–æ–Ω–µ
    query = select(Salon).where(Salon.id == salon_id, Salon.is_active == True)
    result = await db_session.execute(query)
    salon = result.scalar_one_or_none()

    if not salon:
        await callback.answer("‚ùå –°–∞–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await state.update_data(salon_id=salon_id)

    quota_percentage = (salon.quota_used / salon.quota_limit * 100) if salon.quota_limit > 0 else 0
    status_icon = "üü¢" if quota_percentage < 80 else "üü°" if quota_percentage < 95 else "üî¥"

    await callback.message.edit_text(
        f"üí∞ *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–≤–æ—Ç*\n\n"
        f"{status_icon} *{salon.name}* ({salon.city})\n\n"
        f"üìä *–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:*\n"
        f"üí∞ –õ–∏–º–∏—Ç: {salon.quota_limit}\n"
        f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {salon.quota_used}\n"
        f"‚è≥ –î–æ—Å—Ç—É–ø–Ω–æ: {salon.quota_remaining}\n"
        f"üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {quota_percentage:.1f}%\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_back_button("back_to_main"),
        parse_mode="Markdown"
    )
    await state.set_state(AdminStates.waiting_for_quota_amount)
    await callback.answer()


@salon_router.callback_query(F.data.startswith("add_quota_"))
async def add_quota_from_salon_details(callback: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    """–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–≤–æ—Ç –∏–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∞–ª–æ–Ω–µ"""
    salon_id = int(callback.data.split("_")[2])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–ª–æ–Ω–µ
    query = select(Salon).where(Salon.id == salon_id, Salon.is_active == True)
    result = await db_session.execute(query)
    salon = result.scalar_one_or_none()

    if not salon:
        await callback.answer("‚ùå –°–∞–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await state.update_data(salon_id=salon_id)

    quota_percentage = (salon.quota_used / salon.quota_limit * 100) if salon.quota_limit > 0 else 0
    status_icon = "üü¢" if quota_percentage < 80 else "üü°" if quota_percentage < 95 else "üî¥"

    await callback.message.edit_text(
        f"üí∞ *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–≤–æ—Ç*\n\n"
        f"{status_icon} *{salon.name}* ({salon.city})\n\n"
        f"üìä *–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:*\n"
        f"üí∞ –õ–∏–º–∏—Ç: {salon.quota_limit}\n"
        f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {salon.quota_used}\n"
        f"‚è≥ –î–æ—Å—Ç—É–ø–Ω–æ: {salon.quota_remaining}\n"
        f"üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {quota_percentage:.1f}%\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_back_button(f"salon_{salon_id}"),
        parse_mode="Markdown"
    )
    await state.set_state(AdminStates.waiting_for_quota_amount)
    await callback.answer()


@salon_router.message(AdminStates.waiting_for_quota_amount)
async def process_quota_amount(message: Message, state: FSMContext, db_session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–≤–æ—Ç –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    try:
        amount = int(message.text.strip())
        if amount <= 0:
            raise ValueError("Non-positive amount")
        if amount > 999999:
            raise ValueError("Too large amount")
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 999999:",
            reply_markup=get_cancel_keyboard()
        )
        return

    data = await state.get_data()
    salon_id = data['salon_id']

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–≤–æ—Ç—ã —Å–∞–ª–æ–Ω–∞
    query = select(Salon).where(Salon.id == salon_id)
    result = await db_session.execute(query)
    salon = result.scalar_one_or_none()

    if not salon:
        await message.answer(
            "‚ùå –°–∞–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_admin_main_menu()
        )
        await state.clear()
        return

    old_limit = salon.quota_limit
    new_limit = old_limit + amount

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–º –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç
    if new_limit > 999999:
        await message.answer(
            f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –∫–≤–æ—Ç (999999).\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å: {999999 - old_limit}",
            reply_markup=get_cancel_keyboard()
        )
        return

    salon.quota_limit = new_limit

    await db_session.commit()
    await db_session.refresh(salon)

    await state.clear()

    await message.answer(
        f"‚úÖ –ö–≤–æ—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω—ã!\n\n"
        f"üè¢ –°–∞–ª–æ–Ω: {salon.name}\n"
        f"üìä –ë—ã–ª–æ: {old_limit}\n"
        f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: {amount}\n"
        f"üìà –°—Ç–∞–ª–æ: {salon.quota_limit}\n"
        f"üí∞ –î–æ—Å—Ç—É–ø–Ω–æ: {salon.quota_remaining}",
        reply_markup=get_admin_main_menu()
    )

    logger.info(f"Quota refilled for salon {salon.name}: +{amount} (total: {salon.quota_limit})")


# === –£–î–ê–õ–ï–ù–ò–ï –°–ê–õ–û–ù–ê ===
@salon_router.callback_query(F.data.startswith("delete_salon_"))
async def confirm_delete_salon(callback: CallbackQuery, db_session: AsyncSession):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–∞–ª–æ–Ω–∞"""
    salon_id = int(callback.data.split("_")[2])

    query = select(Salon).where(Salon.id == salon_id, Salon.is_active == True)
    result = await db_session.execute(query)
    salon = result.scalar_one_or_none()

    if not salon:
        await callback.answer("‚ùå –°–∞–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Å—Ç–µ—Ä–æ–≤
    masters_count = await db_session.scalar(
        select(func.count(Master.id)).where(
            Master.salon_id == salon_id,
            Master.is_active == True
        )
    )

    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–æ–≤
    analyses_count = await db_session.scalar(
        select(func.count(Analysis.id)).where(Analysis.salon_id == salon_id)
    )

    await callback.message.edit_text(
        f"üóëÔ∏è *–£–¥–∞–ª–µ–Ω–∏–µ —Å–∞–ª–æ–Ω–∞*\n\n"
        f"üè¢ –°–∞–ª–æ–Ω: {salon.name}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {salon.city}\n"
        f"üë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤: {masters_count}\n"
        f"üì∏ –í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤: {analyses_count}\n"
        f"üí∞ –ö–≤–æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {salon.quota_used}/{salon.quota_limit}\n\n"
        f"‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!**\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n"
        f"‚Ä¢ –°–∞–ª–æ–Ω –±—É–¥–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n"
        f"‚Ä¢ –í—Å–µ –º–∞—Å—Ç–µ—Ä–∞ —Å–∞–ª–æ–Ω–∞ –±—É–¥—É—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã\n"
        f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã?",
        reply_markup=get_confirmation_keyboard("delete_salon", salon_id),
        parse_mode="Markdown"
    )
    await callback.answer()


@salon_router.callback_query(F.data.startswith("confirm_delete_salon_"))
async def delete_salon(callback: CallbackQuery, db_session: AsyncSession):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–∞–ª–æ–Ω–∞"""
    salon_id = int(callback.data.split("_")[3])

    query = select(Salon).where(Salon.id == salon_id)
    result = await db_session.execute(query)
    salon = result.scalar_one_or_none()

    if not salon:
        await callback.answer("‚ùå –°–∞–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    salon_name = salon.name
    masters_deactivated = 0

    # –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
    salon.is_active = False

    # –¢–∞–∫–∂–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ —ç—Ç–æ–≥–æ —Å–∞–ª–æ–Ω–∞
    masters_result = await db_session.execute(
        update(Master).where(
            Master.salon_id == salon_id,
            Master.is_active == True
        ).values(is_active=False).returning(Master.id)
    )
    masters_deactivated = len(masters_result.fetchall())

    await db_session.commit()

    await callback.message.edit_text(
        f"‚úÖ –°–∞–ª–æ–Ω —É–¥–∞–ª–µ–Ω\n\n"
        f"üè¢ {salon_name} —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n"
        f"üë§ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –º–∞—Å—Ç–µ—Ä–æ–≤: {masters_deactivated}\n\n"
        f"üìä –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ",
        reply_markup=get_back_button("list_salons")
    )

    logger.info(f"Salon deactivated: {salon_name} (ID: {salon_id}), masters deactivated: {masters_deactivated}")
    await callback.answer()


@salon_router.callback_query(F.data.startswith("cancel_delete_salon_"))
async def cancel_delete_salon(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–∞–ª–æ–Ω–∞"""
    salon_id = int(callback.data.split("_")[3])

    await callback.message.edit_text(
        "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_back_button(f"salon_{salon_id}")
    )
    await callback.answer()