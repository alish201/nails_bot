from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func, text
from loguru import logger
from datetime import datetime, timedelta

from app.keyboards.admin_kb import get_settings_keyboard, get_back_button, get_cancel_keyboard, get_admin_main_menu
from app.states.admin_states import AdminStates
from app.database.models import Owner, SystemLog, Analysis, Master, Salon
from app.utils.helpers import format_datetime, hash_password, verify_password

settings_router = Router()


# === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ù–ê–°–¢–†–û–ï–ö ===
@settings_router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_menu(message: Message):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await message.answer(
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_settings_keyboard(),
        parse_mode="Markdown"
    )


@settings_router.callback_query(F.data == "back_to_settings")
async def back_to_settings(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
    await callback.message.edit_text(
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_settings_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()


# === –°–ú–ï–ù–ê –ü–ê–†–û–õ–Ø ===
@settings_router.callback_query(F.data == "change_password")
async def change_password_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è"""
    await callback.message.edit_text(
        "üîë *–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:*\n"
        "‚Ä¢ –ü–æ—Å–ª–µ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–Ω–æ–≤–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è\n"
        "‚Ä¢ –°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å\n"
        "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–ø–æ–º–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
        reply_markup=get_back_button("back_to_settings"),
        parse_mode="Markdown"
    )
    await state.set_state(AdminStates.waiting_for_current_password)
    await callback.answer()


@settings_router.message(AdminStates.waiting_for_current_password)
async def process_current_password(message: Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–∞—Ä–æ–ª—è"""
    current_password = message.text.strip()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º
    await message.delete()

    from config.settings import settings
    if current_password != settings.ADMIN_PASSWORD:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_keyboard()
        )
        return

    await message.answer(
        "‚úÖ –¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.\n\n"
        "üîë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:\n\n"
        "üìã *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é:*\n"
        "‚Ä¢ –ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤\n"
        "‚Ä¢ –ú–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã",
        reply_markup=get_cancel_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(AdminStates.waiting_for_new_password)


@settings_router.message(AdminStates.waiting_for_new_password)
async def process_new_password(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è"""
    new_password = message.text.strip()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º
    await message.delete()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é
    if len(new_password) < 6:
        await message.answer(
            "‚ùå –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=get_cancel_keyboard()
        )
        return

    if len(new_password) > 50:
        await message.answer(
            "‚ùå –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=get_cancel_keyboard()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–æ–ª—å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã
    if not new_password or new_password.isspace():
        await message.answer(
            "‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤:",
            reply_markup=get_cancel_keyboard()
        )
        return

    await state.update_data(new_password=new_password)

    await message.answer(
        "üîÑ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_password_confirmation)


@settings_router.message(AdminStates.waiting_for_password_confirmation)
async def process_password_confirmation(message: Message, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è"""
    password_confirmation = message.text.strip()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º
    await message.delete()

    data = await state.get_data()
    new_password = data.get('new_password')

    if password_confirmation != new_password:
        await message.answer(
            "‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_keyboard()
        )
        return

    # –ó–¥–µ—Å—å –æ–±—ã—á–Ω–æ –±—ã –æ–±–Ω–æ–≤–ª—è–ª–∏ –ø–∞—Ä–æ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö,
    # –Ω–æ –≤ –¥–∞–Ω–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—å —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    await state.clear()

    await message.answer(
        "‚ö†Ô∏è *–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è*\n\n"
        "–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.\n\n"
        "üîß *–î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:*\n"
        "1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–æ—Ç–∞\n"
        "2. –ò–∑–º–µ–Ω–∏—Ç–µ ADMIN_PASSWORD –≤ —Ñ–∞–π–ª–µ .env\n"
        "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞\n\n"
        "üí° *–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ:* –ú–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø—Ä—è–º–æ –≤ —Ñ–∞–π–ª–µ .env –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.\n\n"
        "‚ö†Ô∏è –ü–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞.",
        reply_markup=get_admin_main_menu(),
        parse_mode="Markdown"
    )

    logger.info(f"Password change requested by admin {message.from_user.id}")


# === –°–ò–°–¢–ï–ú–ù–´–ï –õ–û–ì–ò ===
@settings_router.callback_query(F.data == "system_logs")
async def system_logs(callback: CallbackQuery, db_session: AsyncSession):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–æ–≤
    query = select(SystemLog).order_by(SystemLog.created_at.desc()).limit(15)
    result = await db_session.execute(query)
    logs = result.scalars().all()

    if not logs:
        await callback.message.edit_text(
            "üìã *–°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏*\n\n"
            "–ó–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            reply_markup=get_back_button("back_to_settings"),
            parse_mode="Markdown"
        )
        await callback.answer()
        return

    logs_text = "üìã *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏*\n\n"

    for log in logs[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
        user_info = f"User {log.user_id}" if log.user_id else "System"
        logs_text += (
            f"üïê {format_datetime(log.created_at)}\n"
            f"üë§ {user_info}\n"
            f"üìù {log.action}\n\n"
        )

    if len(logs) > 10:
        logs_text += f"... –∏ –µ—â–µ {len(logs) - 10} –∑–∞–ø–∏—Å–µ–π"

    await callback.message.edit_text(
        logs_text,
        reply_markup=get_back_button("back_to_settings"),
        parse_mode="Markdown"
    )
    await callback.answer()


# === –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• ===
@settings_router.callback_query(F.data == "refresh_data")
async def refresh_data(callback: CallbackQuery, db_session: AsyncSession):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã"""

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    try:
        salons_count = await db_session.scalar(
            select(func.count(Salon.id)).where(Salon.is_active == True)
        )
        masters_count = await db_session.scalar(
            select(func.count(Master.id)).where(Master.is_active == True)
        )
        analyses_count = await db_session.scalar(select(func.count(Analysis.id)))

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_analyses = await db_session.scalar(
            select(func.count(Analysis.id)).where(
                func.date(Analysis.created_at) == func.current_date()
            )
        )

        # –û–±—â–∏–µ –∫–≤–æ—Ç—ã
        total_quota = await db_session.scalar(
            select(func.sum(Salon.quota_limit)).where(Salon.is_active == True)
        ) or 0
        used_quota = await db_session.scalar(
            select(func.sum(Salon.quota_used)).where(Salon.is_active == True)
        ) or 0

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        await db_session.execute(text("SELECT 1"))

        await callback.message.edit_text(
            f"üîÑ *–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã*\n\n"
            f"üìä *–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            f"üè¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∞–ª–æ–Ω–æ–≤: {salons_count}\n"
            f"üë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤: {masters_count}\n"
            f"üì∏ –í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤: {analyses_count}\n"
            f"üìÖ –ê–Ω–∞–ª–∏–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {today_analyses}\n\n"
            f"üí∞ *–ö–≤–æ—Ç—ã:*\n"
            f"üìä –û–±—â–∏–π –ª–∏–º–∏—Ç: {total_quota}\n"
            f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used_quota}\n"
            f"‚è≥ –û—Å—Ç–∞—Ç–æ–∫: {total_quota - used_quota}\n\n"
            f"üü¢ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î: OK\n"
            f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {format_datetime(datetime.now())}",
            reply_markup=get_back_button("back_to_settings"),
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"Error refreshing data: {e}")
        await callback.message.edit_text(
            f"‚ùå *–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö*\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:\n"
            f"`{str(e)}`\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=get_back_button("back_to_settings"),
            parse_mode="Markdown"
        )

    await callback.answer("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")


# === –û–ß–ò–°–¢–ö–ê –õ–û–ì–û–í ===
@settings_router.callback_query(F.data == "clear_logs")
async def clear_logs_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤"""
    from app.keyboards.admin_kb import get_confirmation_keyboard

    await callback.message.edit_text(
        "üóëÔ∏è *–û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤*\n\n"
        "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ!*\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π.\n"
        "–î–∞–Ω–Ω—ã–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=get_confirmation_keyboard("clear_logs", 0),
        parse_mode="Markdown"
    )
    await callback.answer()


@settings_router.callback_query(F.data == "confirm_clear_logs_0")
async def clear_logs_execute(callback: CallbackQuery, db_session: AsyncSession):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤"""
    try:
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
        cutoff_date = datetime.now() - timedelta(days=30)

        result = await db_session.execute(
            text("DELETE FROM system_logs WHERE created_at < :cutoff_date"),
            {"cutoff_date": cutoff_date}
        )

        deleted_count = result.rowcount
        await db_session.commit()

        await callback.message.edit_text(
            f"‚úÖ *–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã*\n\n"
            f"–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {deleted_count}\n"
            f"–£–¥–∞–ª–µ–Ω—ã –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ: {format_datetime(cutoff_date)}\n\n"
            f"üïê –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {format_datetime(datetime.now())}",
            reply_markup=get_back_button("back_to_settings"),
            parse_mode="Markdown"
        )

        logger.info(f"System logs cleared: {deleted_count} records deleted")

    except Exception as e:
        await db_session.rollback()
        logger.error(f"Error clearing logs: {e}")

        await callback.message.edit_text(
            f"‚ùå *–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤*\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: `{str(e)}`",
            reply_markup=get_back_button("back_to_settings"),
            parse_mode="Markdown"
        )

    await callback.answer()


@settings_router.callback_query(F.data == "cancel_clear_logs_0")
async def cancel_clear_logs(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤"""
    await callback.message.edit_text(
        "‚ùå –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=get_back_button("back_to_settings")
    )
    await callback.answer()


# === –ë–≠–ö–ê–ü –î–ê–ù–ù–´–• ===
@settings_router.callback_query(F.data == "backup_data")
async def backup_data_info(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    await callback.message.edit_text(
        "üíæ *–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ*\n\n"
        "üîß *–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:*\n\n"
        "1. **PostgreSQL:**\n"
        "`pg_dump -h localhost -U postgres hair_analysis_bot > backup.sql`\n\n"
        "2. **–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ:**\n"
        "`psql -h localhost -U postgres hair_analysis_bot < backup.sql`\n\n"
        "üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –±—ç–∫–∞–ø—ã —Ä–µ–≥—É–ª—è—Ä–Ω–æ\n"
        "‚Ä¢ –•—Ä–∞–Ω–∏—Ç–µ –±—ç–∫–∞–ø—ã –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –±—ç–∫–∞–ø–æ–≤\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–æ–≤",
        reply_markup=get_back_button("back_to_settings"),
        parse_mode="Markdown"
    )
    await callback.answer()


# === –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===
@settings_router.callback_query(F.data == "system_info")
async def system_info(callback: CallbackQuery, db_session: AsyncSession):
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    import sys
    import platform
    import psutil
    from datetime import datetime

    try:
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        python_version = f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏
        memory = psutil.virtual_memory()
        memory_used = memory.used / (1024 ** 3)  # GB
        memory_total = memory.total / (1024 ** 3)  # GB
        memory_percent = memory.percent

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–µ
        disk = psutil.disk_usage('/')
        disk_used = disk.used / (1024 ** 3)  # GB
        disk_total = disk.total / (1024 ** 3)  # GB
        disk_percent = (disk.used / disk.total) * 100

        # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        boot_time = datetime.fromtimestamp(psutil.boot_time())
        uptime = datetime.now() - boot_time

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_version = await db_session.scalar(text("SELECT version()"))
        db_version_short = db_version.split()[1] if db_version else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        # –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            db_size_query = text("""
                SELECT pg_size_pretty(pg_database_size('hair_analysis_bot'))
            """)
            db_size = await db_session.scalar(db_size_query) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        except:
            db_size = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        last_analysis = await db_session.scalar(
            select(Analysis.created_at).order_by(Analysis.created_at.desc()).limit(1)
        )

        await callback.message.edit_text(
            f"‚ÑπÔ∏è *–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*\n\n"
            f"ü§ñ *–ë–æ—Ç:*\n"
            f"üìä –í–µ—Ä—Å–∏—è: 1.0.0\n"
            f"üêç Python: {python_version}\n"
            f"üíª –û–°: {platform.system()} {platform.release()}\n\n"
            f"üñ•Ô∏è *–†–µ—Å—É—Ä—Å—ã —Å–µ—Ä–≤–µ—Ä–∞:*\n"
            f"üß† –û–ó–£: {memory_used:.1f}/{memory_total:.1f} GB ({memory_percent:.1f}%)\n"
            f"üíæ –î–∏—Å–∫: {disk_used:.1f}/{disk_total:.1f} GB ({disk_percent:.1f}%)\n"
            f"‚è∞ –ê–ø—Ç–∞–π–º: {uptime.days} –¥–Ω–µ–π {uptime.seconds // 3600} —á–∞—Å–æ–≤\n\n"
            f"üóÑÔ∏è *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:*\n"
            f"üìä PostgreSQL: {db_version_short}\n"
            f"üìè –†–∞–∑–º–µ—Ä –ë–î: {db_size}\n\n"
            f"üìà *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*\n"
            f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑: {format_datetime(last_analysis) if last_analysis else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
            f"üïê –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {format_datetime(datetime.now())}",
            reply_markup=get_back_button("back_to_settings"),
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"Error getting system info: {e}")

        await callback.message.edit_text(
            f"‚ÑπÔ∏è *–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*\n\n"
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}\n\n"
            f"ü§ñ *–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n"
            f"üêç Python: {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}\n"
            f"üíª –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.system()}\n"
            f"üïê –í—Ä–µ–º—è: {format_datetime(datetime.now())}",
            reply_markup=get_back_button("back_to_settings"),
            parse_mode="Markdown"
        )

    await callback.answer()


# === –ù–ê–°–¢–†–û–ô–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ===
@settings_router.callback_query(F.data == "notification_settings")
async def notification_settings(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞)"""
    await callback.message.edit_text(
        "üîî *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n"
        "üîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
        "–í —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã:\n"
        "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏–∑–∫–∏—Ö –∫–≤–æ—Ç–∞—Ö\n"
        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã\n"
        "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –º–∞—Å—Ç–µ—Ä–∞—Ö\n"
        "‚Ä¢ –ê–ª–µ—Ä—Ç—ã –æ–± –æ—à–∏–±–∫–∞—Ö —Å–∏—Å—Ç–µ–º—ã\n"
        "‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        reply_markup=get_back_button("back_to_settings"),
        parse_mode="Markdown"
    )
    await callback.answer()


# === –≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–• ===
@settings_router.callback_query(F.data == "export_data")
async def export_data_info(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö"""
    await callback.message.edit_text(
        "üì§ *–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö*\n\n"
        "üîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
        "–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞:\n"
        "‚Ä¢ –°–ø–∏—Å–æ–∫ —Å–∞–ª–æ–Ω–æ–≤ (CSV/Excel)\n"
        "‚Ä¢ –°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ (CSV/Excel)\n"
        "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–æ–≤ (CSV/Excel)\n"
        "‚Ä¢ –û—Ç—á–µ—Ç—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º\n"
        "‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–∞–º–ø –¥–∞–Ω–Ω—ã—Ö\n\n"
        "üí° –ü–æ–∫–∞ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SQL-–∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
        reply_markup=get_back_button("back_to_settings"),
        parse_mode="Markdown"
    )
    await callback.answer()