from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, PhotoSize
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update
from sqlalchemy.orm import selectinload
from sqlalchemy.orm.attributes import flag_modified
from loguru import logger
from datetime import datetime
from typing import List

from app.middlewares.auth import MasterOnlyMiddleware
from app.keyboards.master_kb import *
from app.states.master_states import MasterStates
from app.database.models import Master, Salon, Analysis
from app.utils.helpers import format_datetime

router = Router()
router.message.middleware(MasterOnlyMiddleware())
router.callback_query.middleware(MasterOnlyMiddleware())


# === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ò –ù–ê–í–ò–ì–ê–¶–ò–Ø ===
@router.message(F.text == "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def show_instruction(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
    try:
        instruction_text = """üìñ *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é*

üîç *–ö–∞–∫ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑:*

1Ô∏è‚É£ **–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑** 
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üì∏ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑"
   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Å—Ç–∞—Ç–æ–∫ –∫–≤–æ—Ç

2Ô∏è‚É£ **–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–Ω–∏–µ**
   ‚Ä¢ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –ø–µ—Ä–≤–æ–π —Ä—É–∫–∏
   ‚Ä¢ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –≤—Ç–æ—Ä–æ–π —Ä—É–∫–∏
   ‚Ä¢ –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –∫–∞–∂–¥–æ–π —Ä—É–∫–∏

3Ô∏è‚É£ **–û–ø—Ä–æ—Å –º–∞—Å—Ç–µ—Ä–∞**
   ‚Ä¢ –û–ø–∏—à–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–≥—Ç–µ–π –∫–ª–∏–µ–Ω—Ç–∞
   ‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è

4Ô∏è‚É£ **–ò–ò –∞–Ω–∞–ª–∏–∑**
   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ
   ‚Ä¢ –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –¥–Ω–µ–≤–Ω–∏–∫ —Ä–æ—Å—Ç–∞ –Ω–æ–≥—Ç–µ–π

5Ô∏è‚É£ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã**
   ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
   ‚Ä¢ –ü—Ä–∏–º–∏—Ç–µ –∏–ª–∏ –æ—Å–ø–æ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
   ‚Ä¢ –ö–≤–æ—Ç–∞ —Å–ø–∏—à–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è

üí° *–ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:*
‚Ä¢ –î–µ–ª–∞–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏
‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å—ã–≤–∞–π—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–≥—Ç–µ–π –≤ –æ–ø—Ä–æ—Å–µ
‚Ä¢ –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç - –º–æ–∂–Ω–æ –æ—Å–ø–æ—Ä–∏—Ç—å
‚Ä¢ –ö–≤–æ—Ç–∞ –Ω–µ —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∏–ª–∏ —Å–ø–æ—Ä–µ

‚ùì *–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã?*
–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∞–ª–æ–Ω–∞."""

        await message.answer(instruction_text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Error in show_instruction: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")


@router.message(F.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_my_statistics(message: Message, master: Master, db_session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Å—Ç–µ—Ä–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ —Å —Å–∞–ª–æ–Ω–æ–º
        master_query = select(Master).options(selectinload(Master.salon)).where(Master.id == master.id)
        result = await db_session.execute(master_query)
        master_with_salon = result.scalar_one_or_none()

        if not master_with_salon:
            await message.answer("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Å—Ç–µ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–Ω–∞–ª–∏–∑–æ–≤ –º–∞—Å—Ç–µ—Ä–∞
        analysis_query = select(Analysis).where(Analysis.master_id == master.id)
        analyses_result = await db_session.execute(analysis_query)
        analyses = analyses_result.scalars().all()

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_analyses = len(analyses)
        completed_analyses = len([a for a in analyses if a.status == "completed"])
        disputed_analyses = len([a for a in analyses if a.status == "disputed"])
        in_progress = len([a for a in analyses if a.status in ["started", "ai_analyzing", "ready_for_ai"]])

        # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑
        last_analysis = None
        if analyses:
            last_analysis = max(analyses, key=lambda x: x.created_at if x.created_at else datetime.min)

        stats_text = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Å—Ç–µ—Ä–∞*\n\n"
        stats_text += f"üë§ –ú–∞—Å—Ç–µ—Ä: {master_with_salon.name}\n"
        if master_with_salon.salon:
            stats_text += f"üè¢ –°–∞–ª–æ–Ω: {master_with_salon.salon.name}\n"
            stats_text += f"üèôÔ∏è –ì–æ—Ä–æ–¥: {master_with_salon.salon.city}\n\n"

        stats_text += f"üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤: {total_analyses}\n"
        stats_text += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {completed_analyses}\n"
        stats_text += f"‚Ä¢ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {in_progress}\n"
        stats_text += f"‚Ä¢ –°–ø–æ—Ä–Ω—ã—Ö: {disputed_analyses}\n\n"

        if last_analysis:
            stats_text += f"üìÖ *–ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑:*\n"
            stats_text += f"‚Ä¢ ID: {last_analysis.id}\n"
            stats_text += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {last_analysis.status_emoji} {last_analysis.status}\n"
            if last_analysis.completed_at:
                stats_text += f"‚Ä¢ –î–∞—Ç–∞: {format_datetime(last_analysis.completed_at)}\n"
        else:
            stats_text += f"üìÖ –ê–Ω–∞–ª–∏–∑—ã –µ—â–µ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∏—Å—å"

        await message.answer(stats_text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Error in show_my_statistics: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@router.callback_query(F.data == "main_menu")
@router.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext, master: Master):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        await state.clear()

        try:
            await callback.message.edit_text(
                f"üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n"
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {master.name}!\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode="Markdown",
                reply_markup=get_master_main_menu()
            )
        except:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(
                f"üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n"
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {master.name}!\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode="Markdown",
                reply_markup=get_master_main_menu()
            )

        await callback.answer()

    except Exception as e:
        logger.error(f"Error in back_to_main_menu: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


# === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ú–ê–°–¢–ï–†–ê ===
@router.message(F.text == "üì∏ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑")
async def start_analysis(message: Message, state: FSMContext, master: Master, db_session: AsyncSession):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–∞–Ω–∏–∫—é—Ä–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ –∏ —Å–∞–ª–æ–Ω–µ
        master_query = select(Master).options(selectinload(Master.salon)).where(Master.id == master.id)
        result = await db_session.execute(master_query)
        master_with_salon = result.scalar_one_or_none()

        if not master_with_salon or not master_with_salon.salon:
            await message.answer(
                "‚ùå *–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏*\n\n"
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∞–ª–æ–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="Markdown",
                reply_markup=get_master_main_menu()
            )
            return

        salon = master_with_salon.salon

        if salon.quota_remaining <= 0:
            await message.answer(
                f"‚ùå *–õ–∏–º–∏—Ç –∞–Ω–∞–ª–∏–∑–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω*\n\n"
                f"üè¢ –°–∞–ª–æ–Ω: {salon.name}\n"
                f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {salon.quota_used}/{salon.quota_limit}\n\n"
                f"üí¨ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–≤–æ—Ç.",
                parse_mode="Markdown",
                reply_markup=get_master_main_menu()
            )
            return

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –≤ —Å—Ç–∞—Ç—É—Å–µ "–Ω–∞—á–∞—Ç"
        new_analysis = Analysis(
            master_id=master.id,
            salon_id=salon.id,
            status="started",
            first_hand_photos=[],
            second_hand_photos=[],
            survey_response=None,
            ai_first_analysis=None,
            ai_second_analysis=None,
            ai_diary=None,
            created_at=datetime.now()
        )

        db_session.add(new_analysis)
        await db_session.commit()
        await db_session.refresh(new_analysis)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(analysis_id=new_analysis.id)

        await message.answer(
            f"üì∏ *–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –º–∞–Ω–∏–∫—é—Ä–∞*\n\n"
            f"üí∞ –î–æ—Å—Ç—É–ø–Ω–æ –∞–Ω–∞–ª–∏–∑–æ–≤: {salon.quota_remaining}\n"
            f"üÜî ID –∞–Ω–∞–ª–∏–∑–∞: {new_analysis.id}\n\n"
            f"üìã *–ü—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞:*\n"
            f"1Ô∏è‚É£ –§–æ—Ç–æ –ø–µ—Ä–≤–æ–π —Ä—É–∫–∏\n"
            f"2Ô∏è‚É£ –§–æ—Ç–æ –≤—Ç–æ—Ä–æ–π —Ä—É–∫–∏\n"
            f"3Ô∏è‚É£ –û–ø—Ä–æ—Å –º–∞—Å—Ç–µ—Ä–∞\n"
            f"4Ô∏è‚É£ –ò–ò –∞–Ω–∞–ª–∏–∑ –∏ –¥–Ω–µ–≤–Ω–∏–∫ —Ä–æ—Å—Ç–∞\n"
            f"5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n"
            f"üí° –ö–≤–æ—Ç–∞ —Å–ø–∏—à–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞\n\n"
            f"–ù–∞—á–Ω–µ–º —Å –ø–µ—Ä–≤–æ–π —Ä—É–∫–∏:",
            parse_mode="Markdown",
            reply_markup=get_first_hand_keyboard()
        )
        await state.set_state(MasterStates.waiting_for_first_hand_photos)

    except Exception as e:
        logger.error(f"Error in start_analysis: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–Ω–∞–ª–∏–∑–∞")


# === –ê–ù–ê–õ–ò–ó –ü–ï–†–í–û–ô –†–£–ö–ò ===
@router.callback_query(F.data == "add_first_hand_photo", MasterStates.waiting_for_first_hand_photos)
async def request_first_hand_photo(callback: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–µ—Ä–≤–æ–π —Ä—É–∫–∏"""
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            await callback.message.delete()
        except:
            pass

        await callback.message.answer(
            "üì∏ *–§–æ—Ç–æ –ø–µ—Ä–≤–æ–π —Ä—É–∫–∏*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–µ—Ä–≤–æ–π —Ä—É–∫–∏.\n"
            "–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ñ–æ—Ç–æ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.",
            parse_mode="Markdown",
            reply_markup=get_cancel_analysis_keyboard()
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"Error in request_first_hand_photo: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@router.message(F.photo, MasterStates.waiting_for_first_hand_photos)
async def process_first_hand_photo(message: Message, state: FSMContext, db_session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–µ—Ä–≤–æ–π —Ä—É–∫–∏"""
    try:
        data = await state.get_data()
        analysis_id = data.get('analysis_id')

        if not analysis_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –∞–Ω–∞–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        photo: PhotoSize = message.photo[-1]
        photo_file_id = photo.file_id

        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏–∑ –ë–î
        analysis_query = select(Analysis).where(Analysis.id == analysis_id)
        result = await db_session.execute(analysis_query)
        analysis = result.scalar_one_or_none()

        if analysis:
            logger.info(f"Processing photo for analysis {analysis_id}")
            logger.info(f"Photos before: {analysis.first_hand_photos}")

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ JSON –ø–æ–ª—è
            if analysis.first_hand_photos is None:
                analysis.first_hand_photos = []

            analysis.first_hand_photos.append(photo_file_id)

            # –í–ê–ñ–ù–û: –£–≤–µ–¥–æ–º–ª—è–µ–º SQLAlchemy –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            flag_modified(analysis, 'first_hand_photos')
            await db_session.commit()

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            await db_session.refresh(analysis)
            photos_count = len(analysis.first_hand_photos)

            logger.info(f"Photos after commit: {analysis.first_hand_photos}")
            logger.info(f"Final count: {photos_count}")

            await message.answer_photo(
                photo=photo_file_id,
                caption=(
                    f"‚úÖ *–§–æ—Ç–æ –ø–µ—Ä–≤–æ–π —Ä—É–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ*\n\n"
                    f"üì∏ –í—Å–µ–≥–æ —Ñ–æ—Ç–æ –ø–µ—Ä–≤–æ–π —Ä—É–∫–∏: {photos_count}\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                ),
                parse_mode="Markdown",
                reply_markup=get_first_hand_actions_keyboard(photos_count)
            )

    except Exception as e:
        logger.error(f"Error in process_first_hand_photo: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ")


@router.callback_query(F.data == "view_first_hand_photos", MasterStates.waiting_for_first_hand_photos)
async def view_first_hand_photos(callback: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ñ–æ—Ç–æ –ø–µ—Ä–≤–æ–π —Ä—É–∫–∏"""
    try:
        data = await state.get_data()
        analysis_id = data.get('analysis_id')

        analysis_query = select(Analysis).where(Analysis.id == analysis_id)
        result = await db_session.execute(analysis_query)
        analysis = result.scalar_one_or_none()

        if not analysis or not analysis.first_hand_photos:
            await callback.answer("‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –∫–∞–∫ –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—É
        if len(analysis.first_hand_photos) == 1:
            await callback.message.answer_photo(
                photo=analysis.first_hand_photos[0],
                caption=f"üì∏ –§–æ—Ç–æ –ø–µ—Ä–≤–æ–π —Ä—É–∫–∏ (1 –∏–∑ 1)",
                reply_markup=get_first_hand_actions_keyboard(len(analysis.first_hand_photos))
            )
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –º–Ω–æ–≥–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            await callback.message.answer_photo(
                photo=analysis.first_hand_photos[0],
                caption=(
                    f"üì∏ *–í—Å–µ —Ñ–æ—Ç–æ –ø–µ—Ä–≤–æ–π —Ä—É–∫–∏*\n\n"
                    f"–ü–æ–∫–∞–∑–∞–Ω–æ —Ñ–æ—Ç–æ 1 –∏–∑ {len(analysis.first_hand_photos)}\n"
                    f"–í—Å–µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(analysis.first_hand_photos)}"
                ),
                parse_mode="Markdown",
                reply_markup=get_first_hand_actions_keyboard(len(analysis.first_hand_photos))
            )

        await callback.answer()

    except Exception as e:
        logger.error(f"Error in view_first_hand_photos: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ñ–æ—Ç–æ", show_alert=True)


@router.callback_query(F.data == "remove_last_first_hand", MasterStates.waiting_for_first_hand_photos)
async def delete_last_first_photo(callback: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–æ—Ç–æ –ø–µ—Ä–≤–æ–π —Ä—É–∫–∏"""
    try:
        data = await state.get_data()
        analysis_id = data.get('analysis_id')

        analysis_query = select(Analysis).where(Analysis.id == analysis_id)
        result = await db_session.execute(analysis_query)
        analysis = result.scalar_one_or_none()

        if not analysis or not analysis.first_hand_photos:
            await callback.answer("‚ùå –ù–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
            return

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ JSON –ø–æ–ª—è
        analysis.first_hand_photos.pop()
        flag_modified(analysis, 'first_hand_photos')
        await db_session.commit()
        await db_session.refresh(analysis)

        remaining_count = len(analysis.first_hand_photos)

        if remaining_count > 0:
            try:
                await callback.message.edit_caption(
                    caption=(
                        f"‚úÖ *–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ*\n\n"
                        f"üì∏ –û—Å—Ç–∞–ª–æ—Å—å —Ñ–æ—Ç–æ –ø–µ—Ä–≤–æ–π —Ä—É–∫–∏: {remaining_count}\n\n"
                        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                    ),
                    parse_mode="Markdown",
                    reply_markup=get_first_hand_actions_keyboard(remaining_count)
                )
            except:
                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.answer(
                    f"‚úÖ *–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ*\n\n"
                    f"üì∏ –û—Å—Ç–∞–ª–æ—Å—å —Ñ–æ—Ç–æ –ø–µ—Ä–≤–æ–π —Ä—É–∫–∏: {remaining_count}\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    parse_mode="Markdown",
                    reply_markup=get_first_hand_actions_keyboard(remaining_count)
                )
        else:
            try:
                await callback.message.edit_text(
                    "‚úÖ *–í—Å–µ —Ñ–æ—Ç–æ –ø–µ—Ä–≤–æ–π —Ä—É–∫–∏ —É–¥–∞–ª–µ–Ω—ã*\n\n"
                    "–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:",
                    parse_mode="Markdown",
                    reply_markup=get_first_hand_keyboard()
                )
            except:
                await callback.message.answer(
                    "‚úÖ *–í—Å–µ —Ñ–æ—Ç–æ –ø–µ—Ä–≤–æ–π —Ä—É–∫–∏ —É–¥–∞–ª–µ–Ω—ã*\n\n"
                    "–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:",
                    parse_mode="Markdown",
                    reply_markup=get_first_hand_keyboard()
                )

        await callback.answer("–§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ")

    except Exception as e:
        logger.error(f"Error in delete_last_first_photo: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ", show_alert=True)


@router.callback_query(F.data == "continue_to_second_hand", MasterStates.waiting_for_first_hand_photos)
async def continue_to_second_hand(callback: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–Ω–∏—é –≤—Ç–æ—Ä–æ–π —Ä—É–∫–∏"""
    try:
        data = await state.get_data()
        analysis_id = data.get('analysis_id')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ –ø–µ—Ä–≤–æ–π —Ä—É–∫–∏
        analysis_query = select(Analysis).where(Analysis.id == analysis_id)
        result = await db_session.execute(analysis_query)
        analysis = result.scalar_one_or_none()

        if not analysis or not analysis.first_hand_photos:
            await callback.answer("‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ –ø–µ—Ä–≤–æ–π —Ä—É–∫–∏", show_alert=True)
            return

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            await callback.message.delete()
        except:
            pass

        await callback.message.answer(
            f"‚úÖ *–ü–µ—Ä–≤–∞—è —Ä—É–∫–∞ –≥–æ—Ç–æ–≤–∞*\n\n"
            f"üì∏ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ: {len(analysis.first_hand_photos)}\n\n"
            f"–¢–µ–ø–µ—Ä—å —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –≤—Ç–æ—Ä—É—é —Ä—É–∫—É:",
            parse_mode="Markdown",
            reply_markup=get_second_hand_keyboard()
        )
        await state.set_state(MasterStates.waiting_for_second_hand_photos)
        await callback.answer()

    except Exception as e:
        logger.error(f"Error in continue_to_second_hand: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


# === –í–û–ó–í–†–ê–¢ –ö –ü–ï–†–í–û–ô –†–£–ö–ï ===
@router.callback_query(F.data == "back_to_first_hand", MasterStates.waiting_for_second_hand_photos)
async def back_to_first_hand(callback: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø–µ—Ä–≤–æ–π —Ä—É–∫–µ"""
    try:
        await state.set_state(MasterStates.waiting_for_first_hand_photos)

        data = await state.get_data()
        analysis_id = data.get('analysis_id')

        analysis_query = select(Analysis).where(Analysis.id == analysis_id)
        result = await db_session.execute(analysis_query)
        analysis = result.scalar_one_or_none()

        photos_count = len(analysis.first_hand_photos or []) if analysis else 0

        await callback.message.edit_text(
            f"üì∏ *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Ä—É–∫–∏*\n\n"
            f"üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ: {photos_count}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="Markdown",
            reply_markup=get_first_hand_actions_keyboard(
                photos_count) if photos_count > 0 else get_first_hand_keyboard()
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"Error in back_to_first_hand: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


# === –ê–ù–ê–õ–ò–ó –í–¢–û–†–û–ô –†–£–ö–ò ===
@router.callback_query(F.data == "add_second_hand_photo", MasterStates.waiting_for_second_hand_photos)
async def request_second_hand_photo(callback: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤—Ç–æ—Ä–æ–π —Ä—É–∫–∏"""
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            await callback.message.delete()
        except:
            pass

        await callback.message.answer(
            "üì∏ *–§–æ—Ç–æ –≤—Ç–æ—Ä–æ–π —Ä—É–∫–∏*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤—Ç–æ—Ä–æ–π —Ä—É–∫–∏.\n"
            "–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ñ–æ—Ç–æ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø—Ä–æ—Å—É.",
            parse_mode="Markdown",
            reply_markup=get_cancel_analysis_keyboard()
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"Error in request_second_hand_photo: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@router.message(F.photo, MasterStates.waiting_for_second_hand_photos)
async def process_second_hand_photo(message: Message, state: FSMContext, db_session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤—Ç–æ—Ä–æ–π —Ä—É–∫–∏"""
    try:
        data = await state.get_data()
        analysis_id = data.get('analysis_id')

        if not analysis_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –∞–Ω–∞–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        photo: PhotoSize = message.photo[-1]
        photo_file_id = photo.file_id

        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –ë–î
        analysis_query = select(Analysis).where(Analysis.id == analysis_id)
        result = await db_session.execute(analysis_query)
        analysis = result.scalar_one_or_none()

        if analysis:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ JSON –ø–æ–ª—è
            if analysis.second_hand_photos is None:
                analysis.second_hand_photos = []

            analysis.second_hand_photos.append(photo_file_id)
            flag_modified(analysis, 'second_hand_photos')
            await db_session.commit()
            await db_session.refresh(analysis)

            photos_count = len(analysis.second_hand_photos)
            await message.answer_photo(
                photo=photo_file_id,
                caption=(
                    f"‚úÖ *–§–æ—Ç–æ –≤—Ç–æ—Ä–æ–π —Ä—É–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ*\n\n"
                    f"üì∏ –í—Å–µ–≥–æ —Ñ–æ—Ç–æ –≤—Ç–æ—Ä–æ–π —Ä—É–∫–∏: {photos_count}\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                ),
                parse_mode="Markdown",
                reply_markup=get_second_hand_actions_keyboard(photos_count)
            )

    except Exception as e:
        logger.error(f"Error in process_second_hand_photo: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ")


@router.callback_query(F.data == "view_second_hand_photos", MasterStates.waiting_for_second_hand_photos)
async def view_second_hand_photos(callback: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ñ–æ—Ç–æ –≤—Ç–æ—Ä–æ–π —Ä—É–∫–∏"""
    try:
        data = await state.get_data()
        analysis_id = data.get('analysis_id')

        analysis_query = select(Analysis).where(Analysis.id == analysis_id)
        result = await db_session.execute(analysis_query)
        analysis = result.scalar_one_or_none()

        if not analysis or not analysis.second_hand_photos:
            await callback.answer("‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        await callback.message.answer_photo(
            photo=analysis.second_hand_photos[0],
            caption=(
                f"üì∏ *–í—Å–µ —Ñ–æ—Ç–æ –≤—Ç–æ—Ä–æ–π —Ä—É–∫–∏*\n\n"
                f"–ü–æ–∫–∞–∑–∞–Ω–æ —Ñ–æ—Ç–æ 1 –∏–∑ {len(analysis.second_hand_photos)}\n"
                f"–í—Å–µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(analysis.second_hand_photos)}"
            ),
            parse_mode="Markdown",
            reply_markup=get_second_hand_actions_keyboard(len(analysis.second_hand_photos))
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"Error in view_second_hand_photos: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ñ–æ—Ç–æ", show_alert=True)


@router.callback_query(F.data == "remove_last_second_hand", MasterStates.waiting_for_second_hand_photos)
async def delete_last_second_photo(callback: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–æ—Ç–æ –≤—Ç–æ—Ä–æ–π —Ä—É–∫–∏"""
    try:
        data = await state.get_data()
        analysis_id = data.get('analysis_id')

        analysis_query = select(Analysis).where(Analysis.id == analysis_id)
        result = await db_session.execute(analysis_query)
        analysis = result.scalar_one_or_none()

        if not analysis or not analysis.second_hand_photos:
            await callback.answer("‚ùå –ù–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
            return

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ JSON –ø–æ–ª—è
        analysis.second_hand_photos.pop()
        flag_modified(analysis, 'second_hand_photos')
        await db_session.commit()
        await db_session.refresh(analysis)

        remaining_count = len(analysis.second_hand_photos)

        if remaining_count > 0:
            try:
                await callback.message.edit_caption(
                    caption=(
                        f"‚úÖ *–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ*\n\n"
                        f"üì∏ –û—Å—Ç–∞–ª–æ—Å—å —Ñ–æ—Ç–æ –≤—Ç–æ—Ä–æ–π —Ä—É–∫–∏: {remaining_count}\n\n"
                        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                    ),
                    parse_mode="Markdown",
                    reply_markup=get_second_hand_actions_keyboard(remaining_count)
                )
            except:
                await callback.message.answer(
                    f"‚úÖ *–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ*\n\n"
                    f"üì∏ –û—Å—Ç–∞–ª–æ—Å—å —Ñ–æ—Ç–æ –≤—Ç–æ—Ä–æ–π —Ä—É–∫–∏: {remaining_count}\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    parse_mode="Markdown",
                    reply_markup=get_second_hand_actions_keyboard(remaining_count)
                )
        else:
            try:
                await callback.message.edit_text(
                    "‚úÖ *–í—Å–µ —Ñ–æ—Ç–æ –≤—Ç–æ—Ä–æ–π —Ä—É–∫–∏ —É–¥–∞–ª–µ–Ω—ã*\n\n"
                    "–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:",
                    parse_mode="Markdown",
                    reply_markup=get_second_hand_keyboard()
                )
            except:
                await callback.message.answer(
                    "‚úÖ *–í—Å–µ —Ñ–æ—Ç–æ –≤—Ç–æ—Ä–æ–π —Ä—É–∫–∏ —É–¥–∞–ª–µ–Ω—ã*\n\n"
                    "–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:",
                    parse_mode="Markdown",
                    reply_markup=get_second_hand_keyboard()
                )

        await callback.answer("–§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ")

    except Exception as e:
        logger.error(f"Error in delete_last_second_photo: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ", show_alert=True)


@router.callback_query(F.data == "continue_to_survey", MasterStates.waiting_for_second_hand_photos)
async def continue_to_survey(callback: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø—Ä–æ—Å—É –º–∞—Å—Ç–µ—Ä–∞"""
    try:
        data = await state.get_data()
        analysis_id = data.get('analysis_id')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ –≤—Ç–æ—Ä–æ–π —Ä—É–∫–∏
        analysis_query = select(Analysis).where(Analysis.id == analysis_id)
        result = await db_session.execute(analysis_query)
        analysis = result.scalar_one_or_none()

        if not analysis or not analysis.second_hand_photos:
            await callback.answer("‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ –≤—Ç–æ—Ä–æ–π —Ä—É–∫–∏", show_alert=True)
            return

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            await callback.message.delete()
        except:
            pass

        await callback.message.answer(
            f"‚úÖ *–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ*\n\n"
            f"üì∏ –§–æ—Ç–æ –ø–µ—Ä–≤–æ–π —Ä—É–∫–∏: {len(analysis.first_hand_photos)}\n"
            f"üì∏ –§–æ—Ç–æ –≤—Ç–æ—Ä–æ–π —Ä—É–∫–∏: {len(analysis.second_hand_photos)}\n\n"
            f"üìã *–í–æ–ø—Ä–æ—Å –º–∞—Å—Ç–µ—Ä—É:*\n\n"
            f"–û–ø–∏—à–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–≥—Ç–µ–π –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–º–µ—Ç–∏–ª–∏:\n"
            f"(—Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É—Ç–∏–∫—É–ª—ã, —Ñ–æ—Ä–º–∞ –Ω–æ–≥—Ç–µ–π, –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞)",
            parse_mode="Markdown",
            reply_markup=get_cancel_analysis_keyboard()
        )
        await state.set_state(MasterStates.waiting_for_survey_response)
        await callback.answer()

    except Exception as e:
        logger.error(f"Error in continue_to_survey: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


# === –û–ü–†–û–° –ú–ê–°–¢–ï–†–ê ===
@router.message(F.text, MasterStates.waiting_for_survey_response)
async def process_survey_response(message: Message, state: FSMContext, db_session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ –æ–ø—Ä–æ—Å"""
    try:
        data = await state.get_data()
        analysis_id = data.get('analysis_id')

        if not analysis_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –∞–Ω–∞–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        survey_response = message.text.strip()

        if len(survey_response) < 10:
            await message.answer(
                "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–≥—Ç–µ–π –∫–ª–∏–µ–Ω—Ç–∞:"
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –ë–î
        analysis_query = select(Analysis).where(Analysis.id == analysis_id)
        result = await db_session.execute(analysis_query)
        analysis = result.scalar_one_or_none()

        if analysis:
            analysis.survey_response = survey_response
            analysis.status = "ready_for_ai"
            await db_session.commit()

            await message.answer(
                f"‚úÖ *–î–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã*\n\n"
                f"üì∏ –§–æ—Ç–æ –ø–µ—Ä–≤–æ–π —Ä—É–∫–∏: {len(analysis.first_hand_photos)}\n"
                f"üì∏ –§–æ—Ç–æ –≤—Ç–æ—Ä–æ–π —Ä—É–∫–∏: {len(analysis.second_hand_photos)}\n"
                f"üìù –û—Ç–≤–µ—Ç –º–∞—Å—Ç–µ—Ä–∞: –ø–æ–ª—É—á–µ–Ω\n\n"
                f"ü§ñ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ò–ò –∞–Ω–∞–ª–∏–∑?",
                parse_mode="Markdown",
                reply_markup=get_start_ai_analysis_keyboard()
            )
            await state.set_state(MasterStates.ready_for_ai_analysis)

    except Exception as e:
        logger.error(f"Error in process_survey_response: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞")


# === –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –û–¢–í–ï–¢–ê ===
@router.callback_query(F.data == "edit_survey_response", MasterStates.ready_for_ai_analysis)
async def edit_survey_response(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–ø—Ä–æ—Å"""
    try:
        await callback.message.edit_text(
            f"‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞*\n\n"
            f"üìã –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:\n\n"
            f"–û–ø–∏—à–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–≥—Ç–µ–π –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–º–µ—Ç–∏–ª–∏:",
            parse_mode="Markdown",
            reply_markup=get_cancel_analysis_keyboard()
        )
        await state.set_state(MasterStates.waiting_for_survey_response)
        await callback.answer()

    except Exception as e:
        logger.error(f"Error in edit_survey_response: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


# === –ò–ò –ê–ù–ê–õ–ò–ó ===
@router.callback_query(F.data == "start_ai_analysis", MasterStates.ready_for_ai_analysis)
async def start_ai_analysis(callback: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    """–ó–∞–ø—É—Å–∫ –ò–ò –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        data = await state.get_data()
        analysis_id = data.get('analysis_id')

        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑
        analysis_query = select(Analysis).where(Analysis.id == analysis_id)
        result = await db_session.execute(analysis_query)
        analysis = result.scalar_one_or_none()

        if not analysis:
            await callback.answer("‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        analysis.status = "ai_analyzing"
        analysis.ai_started_at = datetime.now()
        await db_session.commit()

        await callback.message.edit_text(
            f"ü§ñ *–ò–ò –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω*\n\n"
            f"‚è≥ –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤–æ–π —Ä—É–∫–∏...\n"
            f"‚è≥ –ê–Ω–∞–ª–∏–∑ –≤—Ç–æ—Ä–æ–π —Ä—É–∫–∏...\n"
            f"‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞ —Ä–æ—Å—Ç–∞...\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 2-3 –º–∏–Ω—É—Ç—ã.",
            parse_mode="Markdown"
        )

        # === –ó–î–ï–°–¨ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –í–ê–®–ò–ú –ò–ò ===
        try:
            # 1. –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤–æ–π —Ä—É–∫–∏
            first_hand_result = await analyze_first_hand_ai(
                photos=analysis.first_hand_photos,
                survey_data=analysis.survey_response
            )
            analysis.ai_first_analysis = first_hand_result

            # 2. –ê–Ω–∞–ª–∏–∑ –≤—Ç–æ—Ä–æ–π —Ä—É–∫–∏
            second_hand_result = await analyze_second_hand_ai(
                photos=analysis.second_hand_photos,
                survey_data=analysis.survey_response
            )
            analysis.ai_second_analysis = second_hand_result

            # 3. –°–æ–∑–¥–∞–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞ —Ä–æ—Å—Ç–∞
            diary_result = await generate_growth_diary_ai(
                first_analysis=first_hand_result,
                second_analysis=second_hand_result,
                survey_data=analysis.survey_response
            )
            analysis.ai_diary = diary_result

            analysis.status = "ai_completed"
            analysis.completed_at = datetime.now()
            analysis.ai_completed_at = datetime.now()
            await db_session.commit()

            await callback.message.edit_text(
                f"‚úÖ *–ò–ò –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω*\n\n"
                f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É",
                parse_mode="Markdown",
                reply_markup=get_view_results_keyboard()
            )
            await state.set_state(MasterStates.reviewing_results)

        except Exception as e:
            logger.error(f"AI analysis error: {e}")
            analysis.status = "ai_error"
            await db_session.commit()

            await callback.message.edit_text(
                f"‚ùå *–û—à–∏–±–∫–∞ –ò–ò –∞–Ω–∞–ª–∏–∑–∞*\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="Markdown",
                reply_markup=get_retry_analysis_keyboard()
            )

        await callback.answer()

    except Exception as e:
        logger.error(f"Error in start_ai_analysis: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞", show_alert=True)


@router.callback_query(F.data == "retry_ai_analysis")
async def retry_ai_analysis(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ò–ò –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        await state.set_state(MasterStates.ready_for_ai_analysis)

        await callback.message.edit_text(
            f"üîÑ *–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞*\n\n"
            f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∑–∞–Ω–æ–≤–æ?",
            parse_mode="Markdown",
            reply_markup=get_start_ai_analysis_keyboard()
        )
        await callback.answer("–ì–æ—Ç–æ–≤ –∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ")

    except Exception as e:
        logger.error(f"Error in retry_ai_analysis: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


# === –ü–†–û–°–ú–û–¢–† –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===
@router.callback_query(F.data == "view_results", MasterStates.reviewing_results)
async def view_analysis_results(callback: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        data = await state.get_data()
        analysis_id = data.get('analysis_id')

        analysis_query = select(Analysis).where(Analysis.id == analysis_id)
        result = await db_session.execute(analysis_query)
        analysis = result.scalar_one_or_none()

        if not analysis or analysis.status != "ai_completed":
            await callback.answer("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –≥–æ—Ç–æ–≤—ã", show_alert=True)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        results_text = format_analysis_results(analysis)

        await callback.message.edit_text(
            results_text,
            parse_mode="Markdown",
            reply_markup=get_results_action_keyboard()
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"Error in view_analysis_results: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", show_alert=True)


@router.callback_query(F.data == "accept_results", MasterStates.reviewing_results)
async def accept_results(callback: CallbackQuery, state: FSMContext, master: Master, db_session: AsyncSession):
    """–ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        data = await state.get_data()
        analysis_id = data.get('analysis_id')

        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        analysis_query = select(Analysis).where(Analysis.id == analysis_id)
        result = await db_session.execute(analysis_query)
        analysis = result.scalar_one_or_none()

        if analysis:
            analysis.status = "completed"

            # –°–ü–ò–°–´–í–ê–ï–ú –ö–í–û–¢–£ –¢–û–õ–¨–ö–û –°–ï–ô–ß–ê–°!
            salon_query = select(Salon).where(Salon.id == analysis.salon_id)
            salon_result = await db_session.execute(salon_query)
            salon = salon_result.scalar_one_or_none()

            if salon:
                salon.quota_used += 1

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–æ–≤ –º–∞—Å—Ç–µ—Ä–∞
            master.analyses_count += 1

            await db_session.commit()

            await callback.message.edit_text(
                f"‚úÖ *–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!*\n\n"
                f"üÜî ID –∞–Ω–∞–ª–∏–∑–∞: {analysis.id}\n"
                f"üìä –ö–≤–æ—Ç–∞ —Å–ø–∏—Å–∞–Ω–∞: 1\n"
                f"üí∞ –û—Å—Ç–∞–ª–æ—Å—å –∞–Ω–∞–ª–∏–∑–æ–≤: {salon.quota_remaining}\n\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É!",
                parse_mode="Markdown",
                reply_markup=get_main_menu_button()
            )

            await state.clear()
            logger.info(f"Analysis {analysis.id} completed successfully by master {master.name}")

        await callback.answer("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

    except Exception as e:
        logger.error(f"Error in accept_results: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞", show_alert=True)


@router.callback_query(F.data == "dispute_results", MasterStates.reviewing_results)
async def dispute_results(callback: CallbackQuery, state: FSMContext):
    """–û—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        await callback.message.edit_text(
            f"‚ö†Ô∏è *–û—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤*\n\n"
            f"–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –Ω–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∞–Ω–∞–ª–∏–∑–∞:",
            parse_mode="Markdown",
            reply_markup=get_cancel_dispute_keyboard()
        )
        await state.set_state(MasterStates.disputing_results)
        await callback.answer()

    except Exception as e:
        logger.error(f"Error in dispute_results: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "cancel_dispute", MasterStates.disputing_results)
async def cancel_dispute(callback: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    """–û—Ç–º–µ–Ω–∞ –æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    try:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        await state.set_state(MasterStates.reviewing_results)

        data = await state.get_data()
        analysis_id = data.get('analysis_id')

        analysis_query = select(Analysis).where(Analysis.id == analysis_id)
        result = await db_session.execute(analysis_query)
        analysis = result.scalar_one_or_none()

        if analysis:
            results_text = format_analysis_results(analysis)
            await callback.message.edit_text(
                results_text,
                parse_mode="Markdown",
                reply_markup=get_results_action_keyboard()
            )

        await callback.answer("–û—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

    except Exception as e:
        logger.error(f"Error in cancel_dispute: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.message(F.text, MasterStates.disputing_results)
async def process_dispute(message: Message, state: FSMContext, db_session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–∞–ª–æ–±—ã –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    try:
        data = await state.get_data()
        analysis_id = data.get('analysis_id')
        dispute_reason = message.text.strip()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑
        analysis_query = select(Analysis).where(Analysis.id == analysis_id)
        result = await db_session.execute(analysis_query)
        analysis = result.scalar_one_or_none()

        if analysis:
            analysis.status = "disputed"
            if not analysis.result_data:
                analysis.result_data = {}
            analysis.result_data['dispute_reason'] = dispute_reason
            analysis.result_data['dispute_date'] = datetime.now().isoformat()
            flag_modified(analysis, 'result_data')
            await db_session.commit()

            await message.answer(
                f"üìù *–ñ–∞–ª–æ–±–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞*\n\n"
                f"üÜî ID –∞–Ω–∞–ª–∏–∑–∞: {analysis.id}\n"
                f"üìû –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à—É –∂–∞–ª–æ–±—É\n\n"
                f"‚ö†Ô∏è –ö–≤–æ—Ç–∞ –Ω–µ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–∞ –¥–æ —Ä–µ—à–µ–Ω–∏—è —Å–ø–æ—Ä–∞",
                parse_mode="Markdown",
                reply_markup=get_main_menu_button()
            )

            await state.clear()
            logger.info(f"Analysis {analysis.id} disputed by master")

    except Exception as e:
        logger.error(f"Error in process_dispute: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∂–∞–ª–æ–±—ã")


# === –ü–û–î–ï–õ–ò–¢–¨–°–Ø –ò –°–û–•–†–ê–ù–ò–¢–¨ –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===
@router.callback_query(F.data == "share_results")
async def share_results(callback: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    """–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
    try:
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
        await callback.answer("üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

    except Exception as e:
        logger.error(f"Error in share_results: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "save_results")
async def save_results(callback: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    try:
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        await callback.answer("üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

    except Exception as e:
        logger.error(f"Error in save_results: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


# === –ö–û–ù–¢–ê–ö–¢ –° –ü–û–î–î–ï–†–ñ–ö–û–ô ===
@router.callback_query(F.data == "contact_support")
async def contact_support(callback: CallbackQuery):
    """–ö–æ–Ω—Ç–∞–∫—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    try:
        await callback.message.edit_text(
            f"üìû *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞*\n\n"
            f"–ü–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å:\n"
            f"‚Ä¢ Telegram: @support_username\n"
            f"‚Ä¢ Email: support@example.com\n"
            f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX\n\n"
            f"üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 9:00 - 18:00",
            parse_mode="Markdown",
            reply_markup=get_main_menu_button()
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"Error in contact_support: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


# === –û–¢–ú–ï–ù–ê –ê–ù–ê–õ–ò–ó–ê ===
@router.callback_query(F.data == "cancel_analysis")
async def cancel_analysis(callback: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    """–û—Ç–º–µ–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        data = await state.get_data()
        analysis_id = data.get('analysis_id')

        if analysis_id:
            # –£–¥–∞–ª—è–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            analysis_query = select(Analysis).where(Analysis.id == analysis_id)
            result = await db_session.execute(analysis_query)
            analysis = result.scalar_one_or_none()

            if analysis and analysis.status in ['started', 'ready_for_ai', 'ai_analyzing']:
                await db_session.delete(analysis)
                await db_session.commit()

        await state.clear()

        try:
            await callback.message.edit_text(
                "‚ùå *–ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω*\n\n"
                "–ö–≤–æ—Ç–∞ –Ω–µ –±—ã–ª–∞ —Å–ø–∏—Å–∞–Ω–∞.",
                parse_mode="Markdown",
                reply_markup=get_main_menu_button()
            )
        except:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(
                "‚ùå *–ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω*\n\n"
                "–ö–≤–æ—Ç–∞ –Ω–µ –±—ã–ª–∞ —Å–ø–∏—Å–∞–Ω–∞.",
                parse_mode="Markdown",
                reply_markup=get_main_menu_button()
            )

        await callback.answer("–ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω")

    except Exception as e:
        logger.error(f"Error in cancel_analysis: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∞–Ω–∞–ª–∏–∑–∞", show_alert=True)


# === –ü–†–û–í–ï–†–ö–ê –û–°–¢–ê–¢–ö–ê –ö–í–û–¢ ===
@router.message(F.text == "üí∞ –û—Å—Ç–∞—Ç–æ–∫ –∞–Ω–∞–ª–∏–∑–æ–≤")
async def check_quota(message: Message, master: Master, db_session: AsyncSession):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–æ–≤"""
    try:
        master_query = select(Master).options(selectinload(Master.salon)).where(Master.id == master.id)
        result = await db_session.execute(master_query)
        master_with_salon = result.scalar_one_or_none()

        if not master_with_salon or not master_with_salon.salon:
            await message.answer(
                "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∞–ª–æ–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=get_master_main_menu()
            )
            return

        salon = master_with_salon.salon
        quota_percentage = (salon.quota_used / salon.quota_limit * 100) if salon.quota_limit > 0 else 0

        status_emoji = "üü¢" if salon.quota_remaining > 10 else "üü°" if salon.quota_remaining > 0 else "üî¥"

        await message.answer(
            f"{status_emoji} *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–≤–æ—Ç–∞—Ö*\n\n"
            f"üè¢ –°–∞–ª–æ–Ω: {salon.name}\n"
            f"üèôÔ∏è –ì–æ—Ä–æ–¥: {salon.city}\n\n"
            f"üí∞ –î–æ—Å—Ç—É–ø–Ω–æ –∞–Ω–∞–ª–∏–∑–æ–≤: {salon.quota_remaining}\n"
            f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {salon.quota_used}/{salon.quota_limit}\n"
            f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {quota_percentage:.1f}%\n\n"
            f"üë§ –í–∞—à–∏ –∞–Ω–∞–ª–∏–∑—ã: {master_with_salon.analyses_count}",
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"Error in check_quota: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–≤–æ—Ç–∞—Ö")


# === –§–£–ù–ö–¶–ò–ò –ò–ò –ò–ù–¢–ï–ì–†–ê–¶–ò–ò (–ó–ê–ì–û–¢–û–í–ö–ò) ===
async def analyze_first_hand_ai(photos: List[str], survey_data: str) -> dict:
    """
    –ó–ê–ì–û–¢–û–í–ö–ê –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–≤–æ–π —Ä—É–∫–∏

    –ó–î–ï–°–¨ –í–°–¢–ê–í–¨–¢–ï –í–ê–® –ü–†–û–ú–ü–¢ –î–õ–Ø –ü–ï–†–í–û–ô –†–£–ö–ò –∏ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ

    Args:
        photos: –°–ø–∏—Å–æ–∫ file_id —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–µ—Ä–≤–æ–π —Ä—É–∫–∏
        survey_data: –û—Ç–≤–µ—Ç –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ –æ–ø—Ä–æ—Å

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–≤–æ–π —Ä—É–∫–∏
    """
    # –í–ê–®_–ü–†–û–ú–ü–¢_–ü–ï–†–í–ê–Ø_–†–£–ö–ê = """
    # –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–≥—Ç–µ–π –Ω–∞ –ø–µ—Ä–≤–æ–π —Ä—É–∫–µ...
    # """

    # –í–ê–®_API_–ö–û–î_–ó–î–ï–°–¨
    # result = await your_ai_api.analyze(photos, –í–ê–®_–ü–†–û–ú–ü–¢_–ü–ï–†–í–ê–Ø_–†–£–ö–ê, survey_data)

    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
    return {
        "status": "analyzed",
        "hand": "first",
        "photos_count": len(photos),
        "analysis": "–ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤–æ–π —Ä—É–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω (–∑–∞–≥–ª—É—à–∫–∞)",
        "timestamp": datetime.now().isoformat()
    }


async def analyze_second_hand_ai(photos: List[str], survey_data: str) -> dict:
    """
    –ó–ê–ì–û–¢–û–í–ö–ê –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Ç–æ—Ä–æ–π —Ä—É–∫–∏

    –ó–î–ï–°–¨ –í–°–¢–ê–í–¨–¢–ï –í–ê–® –ü–†–û–ú–ü–¢ –î–õ–Ø –í–¢–û–†–û–ô –†–£–ö–ò –∏ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    """
    # –í–ê–®_–ü–†–û–ú–ü–¢_–í–¢–û–†–ê–Ø_–†–£–ö–ê = """
    # –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–≥—Ç–µ–π –Ω–∞ –≤—Ç–æ—Ä–æ–π —Ä—É–∫–µ...
    # """

    # –í–ê–®_API_–ö–û–î_–ó–î–ï–°–¨

    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
    return {
        "status": "analyzed",
        "hand": "second",
        "photos_count": len(photos),
        "analysis": "–ê–Ω–∞–ª–∏–∑ –≤—Ç–æ—Ä–æ–π —Ä—É–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω (–∑–∞–≥–ª—É—à–∫–∞)",
        "timestamp": datetime.now().isoformat()
    }


async def generate_growth_diary_ai(first_analysis: dict, second_analysis: dict, survey_data: str) -> dict:
    """
    –ó–ê–ì–û–¢–û–í–ö–ê –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–Ω–µ–≤–Ω–∏–∫–∞ —Ä–æ—Å—Ç–∞

    –ó–î–ï–°–¨ –í–°–¢–ê–í–¨–¢–ï –í–ê–® –ü–†–û–ú–ü–¢ –î–õ–Ø –î–ù–ï–í–ù–ò–ö–ê –†–û–°–¢–ê –∏ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    """
    # –í–ê–®_–ü–†–û–ú–ü–¢_–î–ù–ï–í–ù–ò–ö_–†–û–°–¢–ê = """
    # –ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–≤—É—Ö —Ä—É–∫ —Å–æ–∑–¥–∞–π –¥–Ω–µ–≤–Ω–∏–∫ —Ä–æ—Å—Ç–∞ –Ω–æ–≥—Ç–µ–π...
    # """

    # –í–ê–®_API_–ö–û–î_–ó–î–ï–°–¨

    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
    return {
        "status": "generated",
        "diary": "–î–Ω–µ–≤–Ω–∏–∫ —Ä–æ—Å—Ç–∞ —Å–æ–∑–¥–∞–Ω (–∑–∞–≥–ª—É—à–∫–∞)",
        "recommendations": "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É",
        "timestamp": datetime.now().isoformat()
    }


def format_analysis_results(analysis: Analysis) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–∞—Å—Ç–µ—Ä—É"""
    try:
        completed_at_str = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        if analysis.completed_at:
            completed_at_str = format_datetime(analysis.completed_at)

        first_analysis = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        second_analysis = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        diary = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        recommendations = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

        if analysis.ai_first_analysis:
            first_analysis = analysis.ai_first_analysis.get('analysis', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')

        if analysis.ai_second_analysis:
            second_analysis = analysis.ai_second_analysis.get('analysis', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')

        if analysis.ai_diary:
            diary = analysis.ai_diary.get('diary', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
            recommendations = analysis.ai_diary.get('recommendations', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')

        return f"""üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞*

üÜî ID: {analysis.id}
üìÖ –ó–∞–≤–µ—Ä—à–µ–Ω: {completed_at_str}

üì∏ *–§–æ—Ç–æ:*
‚Ä¢ –ü–µ—Ä–≤–∞—è —Ä—É–∫–∞: {len(analysis.first_hand_photos or [])} —Ñ–æ—Ç–æ
‚Ä¢ –í—Ç–æ—Ä–∞—è —Ä—É–∫–∞: {len(analysis.second_hand_photos or [])} —Ñ–æ—Ç–æ

ü§ñ *–ò–ò –ê–Ω–∞–ª–∏–∑:*
‚Ä¢ –ü–µ—Ä–≤–∞—è —Ä—É–∫–∞: {first_analysis}
‚Ä¢ –í—Ç–æ—Ä–∞—è —Ä—É–∫–∞: {second_analysis}

üìñ *–î–Ω–µ–≤–Ω–∏–∫ —Ä–æ—Å—Ç–∞:*
{diary}

üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*
{recommendations}

–ü—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?"""

    except Exception as e:
        logger.error(f"Error in format_analysis_results: {e}")
        return f"üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞*\n\nüÜî ID: {analysis.id}\n\n‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ ===
@router.message()
async def handle_unknown_message(message: Message, master: Master):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –º–∞—Å—Ç–µ—Ä–æ–≤"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—Å—Ç
        if not message.text:
            await message.answer(
                f"üëã –ü—Ä–∏–≤–µ—Ç, {master.name}!\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:",
                reply_markup=get_master_main_menu()
            )
            return

        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.warning(f"Unknown command from master {master.id}: '{message.text}'")

        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {master.name}!\n\n"
            f"–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É: ¬´{message.text}¬ª\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=get_master_main_menu()
        )

    except Exception as e:
        logger.error(f"Error in handle_unknown_message: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_master_main_menu()
        )