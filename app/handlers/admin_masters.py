from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func, update
from sqlalchemy.orm import selectinload
from loguru import logger

from app.keyboards.admin_kb import *
from app.states.admin_states import AdminStates
from app.database.models import Salon, Master, Analysis
from app.utils.helpers import format_datetime, validate_telegram_username

master_router = Router()


# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ê–°–¢–ï–†–ê–ú–ò ===
@master_router.message(F.text == "üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞–º–∏")
async def masters_menu(message: Message):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞–º–∏"""
    await message.answer(
        "üë§ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞–º–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_masters_menu(),
        parse_mode="Markdown"
    )


@master_router.callback_query(F.data == "back_to_masters")
async def back_to_masters_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–æ–≤"""
    await callback.message.edit_text(
        "üë§ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞–º–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_masters_menu(),
        parse_mode="Markdown"
    )
    await callback.answer()


# === –î–û–ë–ê–í–õ–ï–ù–ò–ï –ú–ê–°–¢–ï–†–ê ===
@master_router.callback_query(F.data == "add_master")
async def add_master_start(callback: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∞–ª–æ–Ω–æ–≤
    salons_count = await db_session.scalar(
        select(func.count(Salon.id)).where(Salon.is_active == True)
    )

    if salons_count == 0:
        await callback.message.edit_text(
            "‚ùå *–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∞–ª–æ–Ω–æ–≤*\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–∞–ª–æ–Ω, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞.",
            reply_markup=get_back_button("back_to_masters"),
            parse_mode="Markdown"
        )
        await callback.answer()
        return

    await callback.message.edit_text(
        "‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞*\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –º–∞—Å—Ç–µ—Ä–∞:",
        reply_markup=get_back_button("back_to_masters"),
        parse_mode="Markdown"
    )
    await state.set_state(AdminStates.waiting_for_master_name)


@master_router.message(AdminStates.waiting_for_master_telegram)
async def process_master_telegram(message: Message, state: FSMContext, db_session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram ID –º–∞—Å—Ç–µ—Ä–∞"""
    telegram_input = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω —á–∏—Å–ª–æ–≤–æ–π ID
    try:
        telegram_id = int(telegram_input)
    except ValueError:
        await message.answer(
            "‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n\n"
            "–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ ID: 123456789\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID:",
            reply_markup=get_cancel_keyboard()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å ID
    if telegram_id <= 0:
        await message.answer(
            "‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º:",
            reply_markup=get_cancel_keyboard()
        )
        return

    if telegram_id < 10000:
        await message.answer(
            "‚ùå Telegram ID —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID:",
            reply_markup=get_cancel_keyboard()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—Å—Ç–µ—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    existing_master = await db_session.scalar(
        select(Master).where(Master.telegram_id == telegram_id, Master.is_active == True)
    )
    if existing_master:
        await message.answer(
            f"‚ùå –ú–∞—Å—Ç–µ—Ä —Å Telegram ID {telegram_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
            f"–ò–º—è: {existing_master.name}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π ID:",
            reply_markup=get_cancel_keyboard()
        )
        return

    await state.update_data(telegram_id=telegram_id)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∞–ª–æ–Ω–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    query = select(Salon).where(Salon.is_active == True).order_by(Salon.name, Salon.city)
    result = await db_session.execute(query)
    salons = result.scalars().all()

    if not salons:
        await message.answer(
            "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∞–ª–æ–Ω–æ–≤ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –º–∞—Å—Ç–µ—Ä–∞.",
            reply_markup=get_admin_main_menu()
        )
        await state.clear()
        return

    salons_data = [
        {
            'id': salon.id,
            'name': salon.name,
            'city': salon.city
        }
        for salon in salons
    ]

    data = await state.get_data()

    await message.answer(
        f"üë§ –ò–º—è: *{data['master_name']}*\n"
        f"üí¨ Telegram ID: `{telegram_id}`\n\n"
        f"üè¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–ª–æ–Ω –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞:",
        reply_markup=get_salon_selection_keyboard(salons_data, "select_salon_for_master"),
        parse_mode="Markdown"
    )
    await state.set_state(AdminStates.waiting_for_master_salon)

@master_router.callback_query(F.data.startswith("select_salon_for_master_"))
async def process_master_salon(callback: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∞–ª–æ–Ω–∞ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞"""
    salon_id = int(callback.data.split("_")[-1])

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–∞–ª–æ–Ω–µ
    query = select(Salon).where(Salon.id == salon_id, Salon.is_active == True)
    result = await db_session.execute(query)
    salon = result.scalar_one_or_none()

    if not salon:
        await callback.answer("‚ùå –°–∞–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω", show_alert=True)
        return

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
    new_master = Master(
        name=data['master_name'],
        telegram_id=data['telegram_id'],
        salon_id=salon_id
    )

    try:
        db_session.add(new_master)
        await db_session.commit()
        await db_session.refresh(new_master)

        await state.clear()

        await callback.message.edit_text(
            f"‚úÖ –ú–∞—Å—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üë§ –ò–º—è: {new_master.name}\n"
            f"üí¨ Telegram ID: {data['telegram_id']}\n"
            f"üè¢ –°–∞–ª–æ–Ω: {salon.name} ({salon.city})\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {format_datetime(new_master.created_at)}\n\n"
            f"‚ÑπÔ∏è –ú–∞—Å—Ç–µ—Ä –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start",
            reply_markup=get_back_button("back_to_masters")
        )

        logger.info(f"New master created: {new_master.name} (ID: {new_master.telegram_id}) for salon {salon.name}")
        await callback.answer("–ú–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω!")

    except Exception as e:
        await db_session.rollback()
        logger.error(f"Error creating master: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_back_button("back_to_masters")
        )
        await callback.answer()


# === –°–ü–ò–°–û–ö –ú–ê–°–¢–ï–†–û–í ===
@master_router.callback_query(F.data == "list_masters")
async def list_masters(callback: CallbackQuery, db_session: AsyncSession):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤"""
    query = select(Master).options(selectinload(Master.salon)).where(
        Master.is_active == True
    ).order_by(Master.name)
    result = await db_session.execute(query)
    masters = result.scalars().all()

    if not masters:
        await callback.message.edit_text(
            "üìã *–°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤*\n\n"
            "–ú–∞—Å—Ç–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.",
            reply_markup=get_back_button("back_to_masters"),
            parse_mode="Markdown"
        )
        await callback.answer()
        return

    masters_data = [
        {
            'id': master.id,
            'name': master.name,
            'salon_name': master.salon.name if master.salon else "–°–∞–ª–æ–Ω —É–¥–∞–ª–µ–Ω"
        }
        for master in masters
    ]

    await callback.message.edit_text(
        f"üìã *–°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤* ({len(masters)})\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=get_master_list_keyboard(masters_data),
        parse_mode="Markdown"
    )
    await callback.answer()


# === –î–ï–¢–ê–õ–ò –ú–ê–°–¢–ï–†–ê ===
@master_router.callback_query(F.data.startswith("master_"))
async def show_master_details(callback: CallbackQuery, db_session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –º–∞—Å—Ç–µ—Ä–∞"""
    master_id = int(callback.data.split("_")[1])

    query = select(Master).options(selectinload(Master.salon)).where(
        Master.id == master_id, Master.is_active == True
    )
    result = await db_session.execute(query)
    master = result.scalar_one_or_none()

    if not master:
        await callback.answer("‚ùå –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    salon_info = f"{master.salon.name} ({master.salon.city})" if master.salon else "‚ùå –°–∞–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Å—Ç–µ—Ä–∞
    analyses_today = await db_session.scalar(
        select(func.count(Analysis.id)).where(
            Analysis.master_id == master_id,
            func.date(Analysis.created_at) == func.current_date()
        )
    )

    # –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if master.salon and master.salon.is_active:
        quota_remaining = master.salon.quota_remaining
        status_icon = "üü¢" if quota_remaining > 10 else "üü°" if quota_remaining > 0 else "üî¥"
        quota_info = f"{status_icon} –î–æ—Å—Ç—É–ø–Ω–æ –∞–Ω–∞–ª–∏–∑–æ–≤: {quota_remaining}"
    else:
        quota_info = "üî¥ –°–∞–ª–æ–Ω –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"

    await callback.message.edit_text(
        f"üë§ *{master.name}*\n\n"
        f"üí¨ Telegram ID: `{master.telegram_id}`\n"
        f"üè¢ –°–∞–ª–æ–Ω: {salon_info}\n"
        f"{quota_info}\n\n"
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        f"üì∏ –í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤: {master.analyses_count}\n"
        f"üìÖ –ê–Ω–∞–ª–∏–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {analyses_today}\n\n"
        f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {format_datetime(master.created_at)}\n"
        f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: {format_datetime(master.updated_at)}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_master_actions_keyboard(master_id),
        parse_mode="Markdown"
    )
    await callback.answer()


# === –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ú–ê–°–¢–ï–†–ê ===
@master_router.callback_query(F.data.startswith("edit_master_"))
async def edit_master_menu(callback: CallbackQuery, db_session: AsyncSession):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞"""
    master_id = int(callback.data.split("_")[2])

    query = select(Master).options(selectinload(Master.salon)).where(
        Master.id == master_id, Master.is_active == True
    )
    result = await db_session.execute(query)
    master = result.scalar_one_or_none()

    if not master:
        await callback.answer("‚ùå –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    salon_info = f"{master.salon.name} ({master.salon.city})" if master.salon else "‚ùå –°–∞–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"

    await callback.message.edit_text(
        f"‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞*\n\n"
        f"üë§ –ò–º—è: {master.name}\n"
        f"üí¨ Telegram ID: {master.telegram_id}\n"
        f"üè¢ –°–∞–ª–æ–Ω: {salon_info}\n\n"
        f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=get_master_edit_keyboard(master_id),
        parse_mode="Markdown"
    )
    await callback.answer()


@master_router.callback_query(F.data.startswith("edit_master_name_"))
async def edit_master_name(callback: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –º–∞—Å—Ç–µ—Ä–∞"""
    master_id = int(callback.data.split("_")[3])

    query = select(Master).where(Master.id == master_id, Master.is_active == True)
    result = await db_session.execute(query)
    master = result.scalar_one_or_none()

    if not master:
        await callback.answer("‚ùå –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await state.update_data(master_id=master_id, current_name=master.name)

    await callback.message.edit_text(
        f"‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –º–∞—Å—Ç–µ—Ä–∞*\n\n"
        f"–¢–µ–∫—É—â–µ–µ –∏–º—è: {master.name}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:",
        reply_markup=get_back_button(f"edit_master_{master_id}"),
        parse_mode="Markdown"
    )
    await state.set_state(AdminStates.waiting_for_master_new_name)
    await callback.answer()


@master_router.message(AdminStates.waiting_for_master_new_name)
async def process_master_new_name(message: Message, state: FSMContext, db_session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –º–∞—Å—Ç–µ—Ä–∞"""
    new_name = message.text.strip()

    if len(new_name) < 2:
        await message.answer(
            "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞:",
            reply_markup=get_cancel_keyboard()
        )
        return

    if len(new_name) > 100:
        await message.answer(
            "‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=get_cancel_keyboard()
        )
        return

    data = await state.get_data()
    master_id = data['master_id']
    current_name = data['current_name']

    if new_name == current_name:
        await message.answer(
            "‚ÑπÔ∏è –ò–º—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.",
            reply_markup=get_admin_main_menu()
        )
        await state.clear()
        return

    query = select(Master).where(Master.id == master_id)
    result = await db_session.execute(query)
    master = result.scalar_one_or_none()

    if not master:
        await message.answer("‚ùå –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    old_name = master.name
    master.name = new_name

    await db_session.commit()
    await state.clear()

    await message.answer(
        f"‚úÖ –ò–º—è –º–∞—Å—Ç–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–æ!\n\n"
        f"–ë—ã–ª–æ: {old_name}\n"
        f"–°—Ç–∞–ª–æ: {new_name}",
        reply_markup=get_admin_main_menu()
    )

    logger.info(f"Master name changed from '{old_name}' to '{new_name}' (ID: {master_id})")


@master_router.callback_query(F.data.startswith("edit_master_telegram_"))
async def edit_master_telegram(callback: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram ID –º–∞—Å—Ç–µ—Ä–∞"""
    master_id = int(callback.data.split("_")[3])

    query = select(Master).where(Master.id == master_id, Master.is_active == True)
    result = await db_session.execute(query)
    master = result.scalar_one_or_none()

    if not master:
        await callback.answer("‚ùå –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await state.update_data(master_id=master_id, current_telegram_id=master.telegram_id)

    await callback.message.edit_text(
        f"‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram ID*\n\n"
        f"–¢–µ–∫—É—â–∏–π ID: `{master.telegram_id}`\n\n"
        f"‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è ID –º–∞—Å—Ç–µ—Ä –ø–æ—Ç–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –ø–æ —Å—Ç–∞—Ä–æ–º—É ID.\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π Telegram ID:",
        reply_markup=get_back_button(f"edit_master_{master_id}"),
        parse_mode="Markdown"
    )
    await state.set_state(AdminStates.waiting_for_master_new_telegram)
    await callback.answer()


@master_router.message(AdminStates.waiting_for_master_new_telegram)
async def process_master_new_telegram(message: Message, state: FSMContext, db_session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ Telegram ID –º–∞—Å—Ç–µ—Ä–∞"""
    try:
        new_telegram_id = int(message.text.strip())
        if new_telegram_id <= 0:
            raise ValueError("Non-positive ID")
        if new_telegram_id < 10000:
            raise ValueError("Too short ID")
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π Telegram ID (–º–∏–Ω–∏–º—É–º 5 —Ü–∏—Ñ—Ä):",
            reply_markup=get_cancel_keyboard()
        )
        return

    data = await state.get_data()
    master_id = data['master_id']
    current_telegram_id = data['current_telegram_id']

    if new_telegram_id == current_telegram_id:
        await message.answer(
            "‚ÑπÔ∏è Telegram ID –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è.",
            reply_markup=get_admin_main_menu()
        )
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ —ç—Ç–æ—Ç ID –¥—Ä—É–≥–∏–º –º–∞—Å—Ç–µ—Ä–æ–º
    existing_master = await db_session.scalar(
        select(Master).where(
            Master.telegram_id == new_telegram_id,
            Master.id != master_id,
            Master.is_active == True
        )
    )
    if existing_master:
        await message.answer(
            f"‚ùå Telegram ID {new_telegram_id} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–∞—Å—Ç–µ—Ä–æ–º:\n"
            f"–ò–º—è: {existing_master.name}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π ID:",
            reply_markup=get_cancel_keyboard()
        )
        return

    query = select(Master).where(Master.id == master_id)
    result = await db_session.execute(query)
    master = result.scalar_one_or_none()

    if not master:
        await message.answer("‚ùå –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    old_telegram_id = master.telegram_id
    master.telegram_id = new_telegram_id

    await db_session.commit()
    await state.clear()

    await message.answer(
        f"‚úÖ Telegram ID –º–∞—Å—Ç–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω!\n\n"
        f"üë§ –ú–∞—Å—Ç–µ—Ä: {master.name}\n"
        f"–ë—ã–ª–æ: {old_telegram_id}\n"
        f"–°—Ç–∞–ª–æ: {new_telegram_id}\n\n"
        f"‚ÑπÔ∏è –ú–∞—Å—Ç–µ—Ä –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start",
        reply_markup=get_admin_main_menu()
    )

    logger.info(f"Master telegram_id changed from {old_telegram_id} to {new_telegram_id} (ID: {master_id})")


# === –°–ú–ï–ù–ê –°–ê–õ–û–ù–ê –ú–ê–°–¢–ï–†–ê ===
@master_router.callback_query(F.data.startswith("change_salon_"))
async def change_master_salon(callback: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    """–°–º–µ–Ω–∞ —Å–∞–ª–æ–Ω–∞ –º–∞—Å—Ç–µ—Ä–∞"""
    master_id = int(callback.data.split("_")[2])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ
    master_query = select(Master).options(selectinload(Master.salon)).where(
        Master.id == master_id, Master.is_active == True
    )
    master_result = await db_session.execute(master_query)
    master = master_result.scalar_one_or_none()

    if not master:
        await callback.answer("‚ùå –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∞–ª–æ–Ω–æ–≤
    query = select(Salon).where(Salon.is_active == True).order_by(Salon.name, Salon.city)
    result = await db_session.execute(query)
    salons = result.scalars().all()

    if not salons:
        await callback.message.edit_text(
            "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∞–ª–æ–Ω–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –º–∞—Å—Ç–µ—Ä–∞.",
            reply_markup=get_back_button(f"master_{master_id}"),
            parse_mode="Markdown"
        )
        await callback.answer()
        return

    # –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–∞–ª–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    available_salons = [salon for salon in salons if salon.id != master.salon_id]

    if not available_salons:
        await callback.message.edit_text(
            "‚ùå –ù–µ—Ç –¥—Ä—É–≥–∏—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∞–ª–æ–Ω–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –º–∞—Å—Ç–µ—Ä–∞.",
            reply_markup=get_back_button(f"master_{master_id}"),
            parse_mode="Markdown"
        )
        await callback.answer()
        return

    salons_data = [
        {
            'id': salon.id,
            'name': salon.name,
            'city': salon.city
        }
        for salon in available_salons
    ]

    current_salon = f"{master.salon.name} ({master.salon.city})" if master.salon else "–ù–µ —É–∫–∞–∑–∞–Ω"

    await state.update_data(master_id=master_id)

    await callback.message.edit_text(
        f"üîÑ *–°–º–µ–Ω–∞ —Å–∞–ª–æ–Ω–∞ –º–∞—Å—Ç–µ—Ä–∞*\n\n"
        f"üë§ –ú–∞—Å—Ç–µ—Ä: {master.name}\n"
        f"üè¢ –¢–µ–∫—É—â–∏–π —Å–∞–ª–æ–Ω: {current_salon}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å–∞–ª–æ–Ω:",
        reply_markup=get_salon_selection_keyboard(salons_data, "new_salon_for_master"),
        parse_mode="Markdown"
    )
    await callback.answer()


@master_router.callback_query(F.data.startswith("new_salon_for_master_"))
async def process_new_salon_for_master(callback: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–∞–ª–æ–Ω–∞ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞"""
    salon_id = int(callback.data.split("_")[-1])
    data = await state.get_data()
    master_id = data['master_id']

    # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ —Å —Ç–µ–∫—É—â–∏–º —Å–∞–ª–æ–Ω–æ–º
    master_query = select(Master).options(selectinload(Master.salon)).where(Master.id == master_id)
    master_result = await db_session.execute(master_query)
    master = master_result.scalar_one_or_none()

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Å–∞–ª–æ–Ω
    salon_query = select(Salon).where(Salon.id == salon_id, Salon.is_active == True)
    salon_result = await db_session.execute(salon_query)
    new_salon = salon_result.scalar_one_or_none()

    if not master or not new_salon:
        await callback.answer("‚ùå –ú–∞—Å—Ç–µ—Ä –∏–ª–∏ —Å–∞–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        await state.clear()
        return

    old_salon = master.salon
    old_salon_info = f"{old_salon.name} ({old_salon.city})" if old_salon else "–ù–µ —É–∫–∞–∑–∞–Ω"

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∞–ª–æ–Ω –º–∞—Å—Ç–µ—Ä–∞
    master.salon_id = salon_id

    await db_session.commit()
    await state.clear()

    await callback.message.edit_text(
        f"‚úÖ –°–∞–ª–æ–Ω –º–∞—Å—Ç–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω!\n\n"
        f"üë§ –ú–∞—Å—Ç–µ—Ä: {master.name}\n"
        f"üîÑ –ë—ã–ª–æ: {old_salon_info}\n"
        f"‚úÖ –°—Ç–∞–ª–æ: {new_salon.name} ({new_salon.city})\n\n"
        f"‚ÑπÔ∏è –ú–∞—Å—Ç–µ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π /start",
        reply_markup=get_back_button("list_masters")
    )

    logger.info(f"Master {master.name} moved from salon {old_salon_info} to {new_salon.name}")
    await callback.answer("–°–∞–ª–æ–Ω –∏–∑–º–µ–Ω–µ–Ω!")


# === –£–î–ê–õ–ï–ù–ò–ï –ú–ê–°–¢–ï–†–ê ===
@master_router.callback_query(F.data.startswith("delete_master_"))
async def confirm_delete_master(callback: CallbackQuery, db_session: AsyncSession):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞"""
    master_id = int(callback.data.split("_")[2])

    query = select(Master).options(selectinload(Master.salon)).where(
        Master.id == master_id, Master.is_active == True
    )
    result = await db_session.execute(query)
    master = result.scalar_one_or_none()

    if not master:
        await callback.answer("‚ùå –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    salon_info = f"{master.salon.name} ({master.salon.city})" if master.salon else "‚ùå –°–∞–ª–æ–Ω —É–¥–∞–ª–µ–Ω"

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    from datetime import datetime, timedelta
    month_ago = datetime.now() - timedelta(days=30)
    recent_analyses = await db_session.scalar(
        select(func.count(Analysis.id)).where(
            Analysis.master_id == master_id,
            Analysis.created_at >= month_ago
        )
    )

    await callback.message.edit_text(
        f"üóëÔ∏è *–£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞*\n\n"
        f"üë§ –ú–∞—Å—Ç–µ—Ä: {master.name}\n"
        f"üí¨ Telegram ID: {master.telegram_id}\n"
        f"üè¢ –°–∞–ª–æ–Ω: {salon_info}\n\n"
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        f"üì∏ –í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤: {master.analyses_count}\n"
        f"üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: {recent_analyses}\n"
        f"üìÖ –í —Å–∏—Å—Ç–µ–º–µ —Å: {format_datetime(master.created_at)}\n\n"
        f"‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!**\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n"
        f"‚Ä¢ –ú–∞—Å—Ç–µ—Ä –±—É–¥–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n"
        f"‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n"
        f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã?",
        reply_markup=get_confirmation_keyboard("delete_master", master_id),
        parse_mode="Markdown"
    )
    await callback.answer()


@master_router.callback_query(F.data.startswith("confirm_delete_master_"))
async def delete_master(callback: CallbackQuery, db_session: AsyncSession):
    """–£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞"""
    master_id = int(callback.data.split("_")[3])

    query = select(Master).where(Master.id == master_id)
    result = await db_session.execute(query)
    master = result.scalar_one_or_none()

    if not master:
        await callback.answer("‚ùå –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    master_name = master.name
    telegram_id = master.telegram_id
    analyses_count = master.analyses_count

    # –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
    master.is_active = False

    await db_session.commit()

    await callback.message.edit_text(
        f"‚úÖ –ú–∞—Å—Ç–µ—Ä —É–¥–∞–ª–µ–Ω\n\n"
        f"üë§ {master_name} (ID: {telegram_id}) —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n"
        f"üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∞–Ω–∞–ª–∏–∑–æ–≤: {analyses_count}\n\n"
        f"‚ÑπÔ∏è –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–±–æ—Ç—ã –º–∞—Å—Ç–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ",
        reply_markup=get_back_button("list_masters")
    )

    logger.info(f"Master deactivated: {master_name} (ID: {master_id}, Telegram: {telegram_id})")
    await callback.answer()


@master_router.callback_query(F.data.startswith("cancel_delete_master_"))
async def cancel_delete_master(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞"""
    master_id = int(callback.data.split("_")[3])

    await callback.message.edit_text(
        "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_back_button(f"master_{master_id}")
    )
    await callback.answer()


@master_router.message(AdminStates.waiting_for_master_name)
async def process_master_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –º–∞—Å—Ç–µ—Ä–∞"""
    master_name = message.text.strip()

    if len(master_name) < 2:
        await message.answer(
            "‚ùå –ò–º—è –º–∞—Å—Ç–µ—Ä–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_keyboard()
        )
        return

    if len(master_name) > 100:
        await message.answer(
            "‚ùå –ò–º—è –º–∞—Å—Ç–µ—Ä–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_keyboard()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    allowed_chars = set(
        "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø0123456789 .-'")
    if not all(char in allowed_chars for char in master_name):
        await message.answer(
            "‚ùå –ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã:",
            reply_markup=get_cancel_keyboard()
        )
        return

    await state.update_data(master_name=master_name)
    await message.answer(
        f"üë§ –ò–º—è: *{master_name}*\n\n"
        f"üí¨ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ Telegram ID –º–∞—Å—Ç–µ—Ä–∞.\n\n"
        f"‚ÑπÔ∏è *–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å ID:*\n"
        f"‚Ä¢ –ú–∞—Å—Ç–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É @userinfobot\n"
        f"‚Ä¢ –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —á–∏—Å–ª–æ–≤–æ–π ID –∏–∑ –æ—Ç–≤–µ—Ç–∞\n"
        f"‚Ä¢ ID –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫: 123456789\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ Telegram ID:",
        reply_markup=get_cancel_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(AdminStates.waiting_for_master_telegram)