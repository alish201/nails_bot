import hashlib
import secrets
from datetime import datetime
from typing import Optional, Dict, Any
from loguru import logger


def hash_password(password: str) -> str:
    """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
    salt = secrets.token_hex(16)
    password_hash = hashlib.sha256((password + salt).encode()).hexdigest()
    return f"{salt}:{password_hash}"


def verify_password(password: str, hashed: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è"""
    try:
        salt, stored_hash = hashed.split(':')
        password_hash = hashlib.sha256((password + salt).encode()).hexdigest()
        return password_hash == stored_hash
    except ValueError:
        return False


def format_datetime(dt: Optional[datetime]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    if dt is None:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    return dt.strftime("%d.%m.%Y %H:%M")


def format_quota_info(used: int, limit: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–≤–æ—Ç–∞—Ö"""
    remaining = max(0, limit - used)
    return f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used}/{limit} (–æ—Å—Ç–∞–ª–æ—Å—å: {remaining})"


def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown"""
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    return text


async def log_user_action(user_id: int, action: str, details: Optional[Dict[str, Any]] = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"User {user_id} performed action: {action}", extra={"details": details})


def generate_analysis_id() -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    return f"ANA_{int(datetime.now().timestamp())}_{secrets.token_hex(4)}"


def validate_telegram_username(username: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è Telegram username"""
    if not username:
        return False
    
    # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
    username = username.lstrip('@')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (5-32 —Å–∏–º–≤–æ–ª–∞)
    if len(username) < 5 or len(username) > 32:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–º–≤–æ–ª—ã (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)
    if not username.replace('_', '').isalnum():
        return False
    
    # –ù–µ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Ü–∏—Ñ—Ä—ã
    if username[0].isdigit():
        return False
    
    return True


def format_user_info(name: str, username: Optional[str] = None, user_id: Optional[int] = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    info = name
    if username:
        info += f" (@{username})"
    if user_id:
        info += f" [ID: {user_id}]"
    return info


def calculate_percentage(used: int, total: int) -> float:
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    if total == 0:
        return 0.0
    return round((used / total) * 100, 2)


def format_statistics(total_analyses: int, total_salons: int, total_masters: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    return (
        f"üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        f"üè¢ –°–∞–ª–æ–Ω–æ–≤: {total_salons}\n"
        f"üë§ –ú–∞—Å—Ç–µ—Ä–æ–≤: {total_masters}\n"
        f"üì∏ –ê–Ω–∞–ª–∏–∑–æ–≤: {total_analyses}"
    )
